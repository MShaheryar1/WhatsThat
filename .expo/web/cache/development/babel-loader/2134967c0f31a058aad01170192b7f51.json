{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { withStyleAnimation } from \"../animation/styleAnimation\";\nimport { makeUIMutable } from \"../mutables\";\nimport { LayoutAnimationType } from \"./animationBuilder\";\nimport { runOnUIImmediately } from \"../threads\";\nvar TAG_OFFSET = 1e9;\nfunction startObservingProgress(tag, sharedValue, animationType) {\n  'worklet';\n\n  var isSharedTransition = animationType === LayoutAnimationType.SHARED_ELEMENT_TRANSITION;\n  sharedValue.addListener(tag + TAG_OFFSET, function () {\n    _notifyAboutProgress(tag, sharedValue.value, isSharedTransition);\n  });\n}\nfunction stopObservingProgress(tag, sharedValue, cancelled, removeView) {\n  'worklet';\n\n  sharedValue.removeListener(tag + TAG_OFFSET);\n  _notifyAboutEnd(tag, cancelled, removeView);\n}\nfunction createLayoutAnimationManager() {\n  'worklet';\n\n  var enteringAnimationForTag = new Map();\n  var mutableValuesForTag = new Map();\n  return {\n    start: function start(tag, type, yogaValues, config) {\n      var style = config(yogaValues);\n      var currentAnimation = style.animations;\n      if (type === LayoutAnimationType.ENTERING) {\n        enteringAnimationForTag.set(tag, currentAnimation);\n      } else if (type === LayoutAnimationType.LAYOUT) {\n        var enteringAnimation = enteringAnimationForTag.get(tag);\n        if (enteringAnimation) {\n          currentAnimation = _objectSpread(_objectSpread({}, enteringAnimation), style.animations);\n        }\n      }\n      var value = mutableValuesForTag.get(tag);\n      if (value === undefined) {\n        value = makeUIMutable(style.initialValues);\n        mutableValuesForTag.set(tag, value);\n      } else {\n        stopObservingProgress(tag, value, false, false);\n        value._value = style.initialValues;\n      }\n      var animation = withStyleAnimation(currentAnimation);\n      animation.callback = function (finished) {\n        if (finished) {\n          enteringAnimationForTag.delete(tag);\n          mutableValuesForTag.delete(tag);\n          var shouldRemoveView = type === LayoutAnimationType.EXITING;\n          stopObservingProgress(tag, value, finished, shouldRemoveView);\n        }\n        style.callback && style.callback(finished === undefined ? false : finished);\n      };\n      startObservingProgress(tag, value, type);\n      value.value = animation;\n    },\n    stop: function stop(tag) {\n      var value = mutableValuesForTag.get(tag);\n      if (!value) {\n        return;\n      }\n      stopObservingProgress(tag, value, true, true);\n    }\n  };\n}\nrunOnUIImmediately(function () {\n  'worklet';\n\n  global.LayoutAnimationsManager = createLayoutAnimationManager();\n})();","map":{"version":3,"mappings":"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","names":["withStyleAnimation","makeUIMutable","LayoutAnimationType","runOnUIImmediately","TAG_OFFSET","startObservingProgress","tag","sharedValue","animationType","isSharedTransition","SHARED_ELEMENT_TRANSITION","addListener","_notifyAboutProgress","value","stopObservingProgress","cancelled","removeView","removeListener","_notifyAboutEnd","createLayoutAnimationManager","enteringAnimationForTag","Map","mutableValuesForTag","start","type","yogaValues","config","style","currentAnimation","animations","ENTERING","set","LAYOUT","enteringAnimation","get","undefined","initialValues","_value","animation","callback","finished","delete","shouldRemoveView","EXITING","stop","global","LayoutAnimationsManager"],"sources":["animationsManager.ts"],"sourcesContent":["import { withStyleAnimation } from '../animation/styleAnimation';\nimport { SharedValue } from '../commonTypes';\nimport { makeUIMutable } from '../mutables';\nimport {\n  LayoutAnimationFunction,\n  LayoutAnimationType,\n  LayoutAnimationsValues,\n} from './animationBuilder';\nimport { runOnUIImmediately } from '../threads';\n\nconst TAG_OFFSET = 1e9;\n\nfunction startObservingProgress(\n  tag: number,\n  sharedValue: SharedValue<number>,\n  animationType: LayoutAnimationType\n): void {\n  'worklet';\n  const isSharedTransition =\n    animationType === LayoutAnimationType.SHARED_ELEMENT_TRANSITION;\n  sharedValue.addListener(tag + TAG_OFFSET, () => {\n    _notifyAboutProgress(tag, sharedValue.value, isSharedTransition);\n  });\n}\n\nfunction stopObservingProgress(\n  tag: number,\n  sharedValue: SharedValue<number>,\n  cancelled: boolean,\n  removeView: boolean\n): void {\n  'worklet';\n  sharedValue.removeListener(tag + TAG_OFFSET);\n  _notifyAboutEnd(tag, cancelled, removeView);\n}\n\nfunction createLayoutAnimationManager() {\n  'worklet';\n  const enteringAnimationForTag = new Map();\n  const mutableValuesForTag = new Map();\n\n  return {\n    start(\n      tag: number,\n      type: LayoutAnimationType,\n      yogaValues: LayoutAnimationsValues,\n      config: LayoutAnimationFunction\n    ) {\n      const style = config(yogaValues);\n      let currentAnimation = style.animations;\n\n      if (type === LayoutAnimationType.ENTERING) {\n        enteringAnimationForTag.set(tag, currentAnimation);\n      } else if (type === LayoutAnimationType.LAYOUT) {\n        // When layout animation is requested, but entering is still running, we merge\n        // new layout animation targets into the ongoing animation\n        const enteringAnimation = enteringAnimationForTag.get(tag);\n        if (enteringAnimation) {\n          currentAnimation = { ...enteringAnimation, ...style.animations };\n        }\n      }\n\n      let value = mutableValuesForTag.get(tag);\n      if (value === undefined) {\n        value = makeUIMutable(style.initialValues);\n        mutableValuesForTag.set(tag, value);\n      } else {\n        stopObservingProgress(tag, value, false, false);\n        value._value = style.initialValues;\n      }\n\n      // @ts-ignore The line below started failing because I added types to the method â€“ don't have time to fix it right now\n      const animation = withStyleAnimation(currentAnimation);\n\n      animation.callback = (finished?: boolean) => {\n        if (finished) {\n          enteringAnimationForTag.delete(tag);\n          mutableValuesForTag.delete(tag);\n          const shouldRemoveView = type === LayoutAnimationType.EXITING;\n          stopObservingProgress(tag, value, finished, shouldRemoveView);\n        }\n        style.callback &&\n          style.callback(finished === undefined ? false : finished);\n      };\n\n      startObservingProgress(tag, value, type);\n      value.value = animation;\n    },\n    stop(tag: number) {\n      const value = mutableValuesForTag.get(tag);\n      if (!value) {\n        return;\n      }\n      stopObservingProgress(tag, value, true, true);\n    },\n  };\n}\n\nrunOnUIImmediately(() => {\n  'worklet';\n  global.LayoutAnimationsManager = createLayoutAnimationManager();\n})();\n"]},"metadata":{},"sourceType":"module"}