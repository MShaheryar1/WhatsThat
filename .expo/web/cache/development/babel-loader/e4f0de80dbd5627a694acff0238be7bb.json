{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { useEffect, useRef } from 'react';\nimport { initialUpdaterRun } from \"../animation\";\nimport { makeMutable, startMapper, stopMapper } from \"../core\";\nimport { shouldBeUseWeb } from \"../PlatformChecker\";\nexport function useDerivedValue(processor, dependencies) {\n  var _processor$_closure;\n  var initRef = useRef(null);\n  var inputs = Object.values((_processor$_closure = processor._closure) != null ? _processor$_closure : {});\n  if (shouldBeUseWeb()) {\n    var _dependencies;\n    if (!inputs.length && (_dependencies = dependencies) !== null && _dependencies !== void 0 && _dependencies.length) {\n      inputs = dependencies;\n    }\n  }\n  if (dependencies === undefined) {\n    dependencies = [].concat(_toConsumableArray(inputs), [processor.__workletHash]);\n  } else {\n    dependencies.push(processor.__workletHash);\n  }\n  if (initRef.current === null) {\n    initRef.current = makeMutable(initialUpdaterRun(processor));\n  }\n  var sharedValue = initRef.current;\n  useEffect(function () {\n    var fun = function fun() {\n      'worklet';\n\n      sharedValue.value = processor();\n    };\n    var mapperId = startMapper(fun, inputs, [sharedValue]);\n    return function () {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n  useEffect(function () {\n    return function () {\n      initRef.current = null;\n    };\n  }, []);\n  return sharedValue;\n}","map":{"version":3,"mappings":";AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,iBAAT;AAEA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,UAAnC;AAEA,SAASC,cAAT;AAIA,OAAO,SAASC,eAAT,CACLC,SADK,EAELC,YAFK,EAGY;EAAA;EACjB,IAAMC,OAAO,GAAGT,MAAM,CAAwB,IAAxB,CAAtB;EACA,IAAIU,MAAM,GAAGC,MAAM,CAACC,MAAP,wBAAcL,SAAS,CAACM,QAAV,kCAAsB,EAApC,CAAb;EACA,IAAIR,cAAc,EAAlB,EAAsB;IAAA;IACpB,IAAI,CAACK,MAAM,CAACI,MAAR,qBAAkBN,YAAlB,0CAAkBO,cAAcD,MAApC,EAA4C;MAE1CJ,MAAM,GAAGF,YAAT;IACD;EACF;EAGD,IAAIA,YAAY,KAAKQ,SAArB,EAAgC;IAC9BR,YAAY,gCAAOE,MAAJ,IAAYH,SAAS,CAACU,aAAtB,EAAf;EACD,CAFD,MAEO;IACLT,YAAY,CAACU,IAAb,CAAkBX,SAAS,CAACU,aAA5B;EACD;EAED,IAAIR,OAAO,CAACU,OAAR,KAAoB,IAAxB,EAA8B;IAC5BV,OAAO,CAACU,OAAR,GAAkBjB,WAAW,CAACD,iBAAiB,CAACM,SAAD,CAAlB,CAA7B;EACD;EAGD,IAAMa,WAA2B,GAAGX,OAAO,CAACU,OAA5C;EAEApB,SAAS,CAAC,YAAM;IACd,IAAMsB,GAAG,GAAG,SAANA,GAAG,GAAS;MAChB;;MACAD,WAAW,CAACE,KAAZ,GAAoBf,SAAS,EAA7B;IACD,CAHD;IAIA,IAAMgB,QAAQ,GAAGpB,WAAW,CAACkB,GAAD,EAAMX,MAAN,EAAc,CAACU,WAAD,CAAd,CAA5B;IACA,OAAO,YAAM;MACXhB,UAAU,CAACmB,QAAD,CAAV;IACD,CAFD;EAGD,CATQ,EASNf,YATM,CAAT;EAWAT,SAAS,CAAC,YAAM;IACd,OAAO,YAAM;MACXU,OAAO,CAACU,OAAR,GAAkB,IAAlB;IACD,CAFD;EAGD,CAJQ,EAIN,EAJM,CAAT;EAMA,OAAOC,WAAP;AACD","names":["useEffect","useRef","initialUpdaterRun","makeMutable","startMapper","stopMapper","shouldBeUseWeb","useDerivedValue","processor","dependencies","initRef","inputs","Object","values","_closure","length","_dependencies","undefined","__workletHash","push","current","sharedValue","fun","value","mapperId"],"sources":["useDerivedValue.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { initialUpdaterRun } from '../animation';\nimport { BasicWorkletFunction, SharedValue } from '../commonTypes';\nimport { makeMutable, startMapper, stopMapper } from '../core';\nimport { DependencyList } from './commonTypes';\nimport { shouldBeUseWeb } from '../PlatformChecker';\n\nexport type DerivedValue<T> = Readonly<SharedValue<T>>;\n\nexport function useDerivedValue<T>(\n  processor: BasicWorkletFunction<T>,\n  dependencies: DependencyList\n): DerivedValue<T> {\n  const initRef = useRef<SharedValue<T> | null>(null);\n  let inputs = Object.values(processor._closure ?? {});\n  if (shouldBeUseWeb()) {\n    if (!inputs.length && dependencies?.length) {\n      // let web work without a Babel/SWC plugin\n      inputs = dependencies;\n    }\n  }\n\n  // build dependencies\n  if (dependencies === undefined) {\n    dependencies = [...inputs, processor.__workletHash];\n  } else {\n    dependencies.push(processor.__workletHash);\n  }\n\n  if (initRef.current === null) {\n    initRef.current = makeMutable(initialUpdaterRun(processor));\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const sharedValue: SharedValue<T> = initRef.current!;\n\n  useEffect(() => {\n    const fun = () => {\n      'worklet';\n      sharedValue.value = processor();\n    };\n    const mapperId = startMapper(fun, inputs, [sharedValue]);\n    return () => {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n\n  useEffect(() => {\n    return () => {\n      initRef.current = null;\n    };\n  }, []);\n\n  return sharedValue;\n}\n"]},"metadata":{},"sourceType":"module"}