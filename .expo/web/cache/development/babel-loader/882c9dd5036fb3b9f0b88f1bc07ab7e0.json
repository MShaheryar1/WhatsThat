{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useNavigation } from '@react-navigation/native';\nimport { Ionicons } from '@expo/vector-icons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction Chats() {\n  var navigation = useNavigation();\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    message = _useState2[0],\n    setMessage = _useState2[1];\n  function sendMessage() {\n    return _sendMessage.apply(this, arguments);\n  }\n  function _sendMessage() {\n    _sendMessage = _asyncToGenerator(function* () {\n      try {\n        var token = yield AsyncStorage.getItem('token');\n        var response = yield fetch(\"http://localhost:3333/api/1.0.0/chat/' +chat_id+ '/messages\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: \"Bearer \" + token\n          },\n          body: JSON.stringify({\n            message: message\n          })\n        });\n        if (response.ok) {} else {\n          throw new Error('Failed to send message');\n        }\n      } catch (error) {\n        Alert.alert('Error', error.message);\n      }\n    });\n    return _sendMessage.apply(this, arguments);\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [\"Chats\", _jsx(TextInput, {\n      value: message,\n      onChangeText: setMessage,\n      placeholder: \"Type your message\",\n      style: styles.input\n    }), _jsx(TouchableOpacity, {\n      onPress: sendMessage,\n      children: _jsx(Ionicons, {\n        name: \"send\",\n        size: 24,\n        color: \"white\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#808000',\n    padding: 20,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default Chats;","map":{"version":3,"names":["React","useState","useNavigation","Ionicons","AsyncStorage","Chats","navigation","message","setMessage","sendMessage","token","getItem","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","Error","error","Alert","alert","styles","container","input","StyleSheet","create","flex","backgroundColor","padding","justifyContent","alignItems"],"sources":["/Users/shaheryar/Downloads/WhatsThat/src/Chats.js"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  Alert,\n  TouchableOpacity,\n} from 'react-native'\nimport { useNavigation } from '@react-navigation/native'\nimport { Ionicons } from '@expo/vector-icons'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\n\nfunction Chats() {\n  const navigation = useNavigation()\n  const [message, setMessage] = useState('')\n  async function sendMessage() {\n    try {\n      const token = await AsyncStorage.getItem('token')\n      const response = await fetch(\n        `http://localhost:3333/api/1.0.0/chat/' +chat_id+ '/messages`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`,\n          },\n          body: JSON.stringify({ message }),\n        }\n      )\n      if (response.ok) {\n        // handle success\n      } else {\n        throw new Error('Failed to send message')\n      }\n    } catch (error) {\n      Alert.alert('Error', error.message)\n    }\n  }\n\n  return (\n    <View style={styles.container}>\n      Chats\n      <TextInput\n        value={message}\n        onChangeText={setMessage}\n        placeholder=\"Type your message\"\n        style={styles.input}\n      />\n      <TouchableOpacity onPress={sendMessage}>\n        <Ionicons name=\"send\" size={24} color=\"white\" />\n      </TouchableOpacity>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#808000',\n    padding: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n})\n\nexport default Chats\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASvC,SAASC,aAAa,QAAQ,0BAA0B;AACxD,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,OAAOC,YAAY,MAAM,2CAA2C;AAAA;AAAA;AAEpE,SAASC,KAAK,GAAG;EACf,IAAMC,UAAU,GAAGJ,aAAa,EAAE;EAClC,gBAA8BD,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAnCM,OAAO;IAAEC,UAAU;EAAgB,SAC3BC,WAAW;IAAA;EAAA;EAAA;IAAA,iCAA1B,aAA6B;MAC3B,IAAI;QACF,IAAMC,KAAK,SAASN,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC;QACjD,IAAMC,QAAQ,SAASC,KAAK,gEAE1B;UACEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClCC,aAAa,cAAYN;UAC3B,CAAC;UACDO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEZ,OAAO,EAAPA;UAAQ,CAAC;QAClC,CAAC,CACF;QACD,IAAIK,QAAQ,CAACQ,EAAE,EAAE,CAEjB,CAAC,MAAM;UACL,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;QAC3C;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,KAAK,CAACC,KAAK,CAAC,OAAO,EAAEF,KAAK,CAACf,OAAO,CAAC;MACrC;IACF,CAAC;IAAA;EAAA;EAED,OACE,MAAC,IAAI;IAAC,KAAK,EAAEkB,MAAM,CAACC,SAAU;IAAA,WAAC,OAE7B,OAAC,SAAS;MACR,KAAK,EAAEnB,OAAQ;MACf,YAAY,EAAEC,UAAW;MACzB,WAAW,EAAC,mBAAmB;MAC/B,KAAK,EAAEiB,MAAM,CAACE;IAAM,EACpB,EACF,KAAC,gBAAgB;MAAC,OAAO,EAAElB,WAAY;MAAA,UACrC,KAAC,QAAQ;QAAC,IAAI,EAAC,MAAM;QAAC,IAAI,EAAE,EAAG;QAAC,KAAK,EAAC;MAAO;IAAG,EAC/B;EAAA,EACd;AAEX;AAEA,IAAMgB,MAAM,GAAGG,UAAU,CAACC,MAAM,CAAC;EAC/BH,SAAS,EAAE;IACTI,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,SAAS;IAC1BC,OAAO,EAAE,EAAE;IACXC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEF,eAAe7B,KAAK"},"metadata":{},"sourceType":"module"}