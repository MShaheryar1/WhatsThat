{"ast":null,"code":"import { runOnUIImmediately } from \"../threads\";\nexport var prepareUIRegistry = runOnUIImmediately(function () {\n  'worklet';\n\n  var frameCallbackRegistry = {\n    frameCallbackRegistry: new Map(),\n    activeFrameCallbacks: new Set(),\n    previousFrameTimestamp: null,\n    runCallbacks: function runCallbacks() {\n      var _this = this;\n      var loop = function loop(timestamp) {\n        if (_this.previousFrameTimestamp === null) {\n          _this.previousFrameTimestamp = timestamp;\n        }\n        var delta = timestamp - _this.previousFrameTimestamp;\n        _this.activeFrameCallbacks.forEach(function (callbackId) {\n          var callbackDetails = _this.frameCallbackRegistry.get(callbackId);\n          var startTime = callbackDetails.startTime;\n          if (startTime === null) {\n            callbackDetails.startTime = timestamp;\n            callbackDetails.callback({\n              timestamp: timestamp,\n              timeSincePreviousFrame: null,\n              timeSinceFirstFrame: 0\n            });\n          } else {\n            callbackDetails.callback({\n              timestamp: timestamp,\n              timeSincePreviousFrame: delta,\n              timeSinceFirstFrame: timestamp - startTime\n            });\n          }\n        });\n        if (_this.activeFrameCallbacks.size > 0) {\n          _this.previousFrameTimestamp = timestamp;\n          requestAnimationFrame(loop);\n        } else {\n          _this.previousFrameTimestamp = null;\n        }\n      };\n      if (this.activeFrameCallbacks.size === 1) {\n        requestAnimationFrame(loop);\n      }\n    },\n    registerFrameCallback: function registerFrameCallback(callback, callbackId) {\n      this.frameCallbackRegistry.set(callbackId, {\n        callback: callback,\n        startTime: null\n      });\n    },\n    unregisterFrameCallback: function unregisterFrameCallback(callbackId) {\n      this.manageStateFrameCallback(callbackId, false);\n      this.frameCallbackRegistry.delete(callbackId);\n    },\n    manageStateFrameCallback: function manageStateFrameCallback(callbackId, state) {\n      if (callbackId === -1) {\n        return;\n      }\n      if (state) {\n        this.activeFrameCallbacks.add(callbackId);\n        this.runCallbacks();\n      } else {\n        var callback = this.frameCallbackRegistry.get(callbackId);\n        callback.startTime = null;\n        this.activeFrameCallbacks.delete(callbackId);\n      }\n    }\n  };\n  global._frameCallbackRegistry = frameCallbackRegistry;\n});","map":{"version":3,"mappings":"AAAA,SAASA,kBAAT;AA0BA,OAAO,IAAMC,iBAAiB,GAAGD,kBAAkB,CAAC,YAAM;EACxD;;EAEA,IAAME,qBAA8C,GAAG;IACrDA,qBAAqB,EAAE,IAAIC,GAAJ,EAD8B;IAErDC,oBAAoB,EAAE,IAAIC,GAAJ,EAF+B;IAGrDC,sBAAsB,EAAE,IAH6B;IAKrDC,YAAY,0BAAG;MAAA;MACb,IAAMC,IAAI,GAAIC,SAARD,IAAI,CAAIC,SAAD,EAAuB;QAClC,IAAI,MAAKH,sBAAL,KAAgC,IAApC,EAA0C;UACxC,MAAKA,sBAAL,GAA8BG,SAA9B;QACD;QAED,IAAMC,KAAK,GAAGD,SAAS,GAAG,MAAKH,sBAA/B;QAEA,MAAKF,oBAAL,CAA0BO,OAA1B,CAAmCC,oBAAD,EAAwB;UACxD,IAAMC,eAAe,GAAG,MAAKX,qBAAL,CAA2BY,GAA3B,CAA+BF,UAA/B,CAAxB;UAEA,IAAQG,YAAcF,eAAtB,CAAQE;UAER,IAAIA,SAAS,KAAK,IAAlB,EAAwB;YAEtBF,eAAe,CAACE,SAAhB,GAA4BN,SAA5B;YAEAI,eAAe,CAACG,QAAhB,CAAyB;cACvBP,SADuB,EACvBA,SADuB;cAEvBQ,sBAAsB,EAAE,IAFD;cAGvBC,mBAAmB,EAAE;YAHE,CAAzB;UAKD,CATD,MASO;YAELL,eAAe,CAACG,QAAhB,CAAyB;cACvBP,SADuB,EACvBA,SADuB;cAEvBQ,sBAAsB,EAAEP,KAFD;cAGvBQ,mBAAmB,EAAET,SAAS,GAAGM;YAHV,CAAzB;UAKD;QACF,CAtBD;QAwBA,IAAI,MAAKX,oBAAL,CAA0Be,IAA1B,GAAiC,CAArC,EAAwC;UACtC,MAAKb,sBAAL,GAA8BG,SAA9B;UACAW,qBAAqB,CAACZ,IAAD,CAArB;QACD,CAHD,MAGO;UACL,MAAKF,sBAAL,GAA8B,IAA9B;QACD;MACF,CArCD;MA0CA,IAAI,KAAKF,oBAAL,CAA0Be,IAA1B,KAAmC,CAAvC,EAA0C;QACxCC,qBAAqB,CAACZ,IAAD,CAArB;MACD;IACF,CAnDoD;IAqDrDa,qBAAqB,iCACnBL,QADmB,EAEnBJ,UAFmB,EAGnB;MACA,KAAKV,qBAAL,CAA2BoB,GAA3B,CAA+BV,UAA/B,EAA2C;QACzCI,QAAQ,EAAEA,QAD+B;QAEzCD,SAAS,EAAE;MAF8B,CAA3C;IAID,CA7DoD;IA+DrDQ,uBAAuB,mCAACX,UAAD,EAAqB;MAC1C,KAAKY,wBAAL,CAA8BZ,UAA9B,EAA0C,KAA1C;MACA,KAAKV,qBAAL,CAA2BuB,MAA3B,CAAkCb,UAAlC;IACD,CAlEoD;IAoErDY,wBAAwB,oCAACZ,UAAD,EAAqBc,KAArB,EAAqC;MAC3D,IAAId,UAAU,KAAK,CAAC,CAApB,EAAuB;QACrB;MACD;MACD,IAAIc,KAAJ,EAAW;QACT,KAAKtB,oBAAL,CAA0BuB,GAA1B,CAA8Bf,UAA9B;QACA,KAAKL,YAAL;MACD,CAHD,MAGO;QACL,IAAMS,QAAQ,GAAG,KAAKd,qBAAL,CAA2BY,GAA3B,CAA+BF,UAA/B,CAAjB;QACAI,QAAQ,CAACD,SAAT,GAAqB,IAArB;QAEA,KAAKX,oBAAL,CAA0BqB,MAA1B,CAAiCb,UAAjC;MACD;IACF;EAjFoD,CAAvD;EAoFAgB,MAAM,CAACC,sBAAP,GAAgC3B,qBAAhC;AACD,CAxFkD,CAA5C","names":["runOnUIImmediately","prepareUIRegistry","frameCallbackRegistry","Map","activeFrameCallbacks","Set","previousFrameTimestamp","runCallbacks","loop","timestamp","delta","forEach","callbackId","callbackDetails","get","startTime","callback","timeSincePreviousFrame","timeSinceFirstFrame","size","requestAnimationFrame","registerFrameCallback","set","unregisterFrameCallback","manageStateFrameCallback","delete","state","add","global","_frameCallbackRegistry"],"sources":["FrameCallbackRegistryUI.ts"],"sourcesContent":["import { runOnUIImmediately } from '../threads';\n\ntype CallbackDetails = {\n  callback: (frameInfo: FrameInfo) => void;\n  startTime: number | null;\n};\n\nexport type FrameInfo = {\n  timestamp: number;\n  timeSincePreviousFrame: number | null;\n  timeSinceFirstFrame: number;\n};\n\nexport interface FrameCallbackRegistryUI {\n  frameCallbackRegistry: Map<number, CallbackDetails>;\n  activeFrameCallbacks: Set<number>;\n  previousFrameTimestamp: number | null;\n  runCallbacks: () => void;\n  registerFrameCallback: (\n    callback: (frameInfo: FrameInfo) => void,\n    callbackId: number\n  ) => void;\n  unregisterFrameCallback: (callbackId: number) => void;\n  manageStateFrameCallback: (callbackId: number, state: boolean) => void;\n}\n\nexport const prepareUIRegistry = runOnUIImmediately(() => {\n  'worklet';\n\n  const frameCallbackRegistry: FrameCallbackRegistryUI = {\n    frameCallbackRegistry: new Map<number, CallbackDetails>(),\n    activeFrameCallbacks: new Set<number>(),\n    previousFrameTimestamp: null,\n\n    runCallbacks() {\n      const loop = (timestamp: number) => {\n        if (this.previousFrameTimestamp === null) {\n          this.previousFrameTimestamp = timestamp;\n        }\n\n        const delta = timestamp - this.previousFrameTimestamp;\n\n        this.activeFrameCallbacks.forEach((callbackId: number) => {\n          const callbackDetails = this.frameCallbackRegistry.get(callbackId)!;\n\n          const { startTime } = callbackDetails;\n\n          if (startTime === null) {\n            // First frame\n            callbackDetails.startTime = timestamp;\n\n            callbackDetails.callback({\n              timestamp,\n              timeSincePreviousFrame: null,\n              timeSinceFirstFrame: 0,\n            });\n          } else {\n            // Next frame\n            callbackDetails.callback({\n              timestamp,\n              timeSincePreviousFrame: delta,\n              timeSinceFirstFrame: timestamp - startTime,\n            });\n          }\n        });\n\n        if (this.activeFrameCallbacks.size > 0) {\n          this.previousFrameTimestamp = timestamp;\n          requestAnimationFrame(loop);\n        } else {\n          this.previousFrameTimestamp = null;\n        }\n      };\n\n      // runCallback() should only be called after registering a callback,\n      // so if there is only one active callback, then it means that there were\n      // zero previously and the loop isn't running yet.\n      if (this.activeFrameCallbacks.size === 1) {\n        requestAnimationFrame(loop);\n      }\n    },\n\n    registerFrameCallback(\n      callback: (frameInfo: FrameInfo) => void,\n      callbackId: number\n    ) {\n      this.frameCallbackRegistry.set(callbackId, {\n        callback: callback,\n        startTime: null,\n      });\n    },\n\n    unregisterFrameCallback(callbackId: number) {\n      this.manageStateFrameCallback(callbackId, false);\n      this.frameCallbackRegistry.delete(callbackId);\n    },\n\n    manageStateFrameCallback(callbackId: number, state: boolean) {\n      if (callbackId === -1) {\n        return;\n      }\n      if (state) {\n        this.activeFrameCallbacks.add(callbackId);\n        this.runCallbacks();\n      } else {\n        const callback = this.frameCallbackRegistry.get(callbackId)!;\n        callback.startTime = null;\n\n        this.activeFrameCallbacks.delete(callbackId);\n      }\n    },\n  };\n\n  global._frameCallbackRegistry = frameCallbackRegistry;\n});\n"]},"metadata":{},"sourceType":"module"}