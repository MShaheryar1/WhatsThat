{"ast":null,"code":"import NativeReanimatedModule from \"./NativeReanimated\";\nimport { nativeShouldBeMock, shouldBeUseWeb, isWeb } from \"./PlatformChecker\";\nimport { makeShareableCloneRecursive, makeShareable as makeShareableUnwrapped } from \"./shareables\";\nimport { startMapper as startMapperUnwrapped } from \"./mappers\";\nimport { makeMutable as makeMutableUnwrapped, makeRemote as makeRemoteUnwrapped } from \"./mutables\";\nimport { initializeUIRuntime } from \"./initializers\";\nexport { stopMapper } from \"./mappers\";\nexport { runOnJS, runOnUI } from \"./threads\";\nvar testWorklet = function testWorklet() {\n  'worklet';\n};\nvar throwUninitializedReanimatedException = function throwUninitializedReanimatedException() {\n  throw new Error(\"Failed to initialize react-native-reanimated library, make sure you followed installation steps here: https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/installation/ \\n1) Make sure reanimated's babel plugin is installed in your babel.config.js (you should have 'react-native-reanimated/plugin' listed there - also see the above link for details) \\n2) Make sure you reset build cache after updating the config, run: yarn start --reset-cache\");\n};\nexport var checkPluginState = function checkPluginState() {\n  var throwError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  if (!testWorklet.__workletHash && !shouldBeUseWeb()) {\n    if (throwError) {\n      throwUninitializedReanimatedException();\n    }\n    return false;\n  }\n  return true;\n};\nexport var isConfigured = function isConfigured() {\n  var throwError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return checkPluginState(throwError);\n};\nexport var isConfiguredCheck = function isConfiguredCheck() {\n  checkPluginState(true);\n};\nvar configurationCheckWrapper = __DEV__ ? function (fn) {\n  return function () {\n    isConfigured(true);\n    return fn.apply(void 0, arguments);\n  };\n} : function (fn) {\n  return fn;\n};\nexport var startMapper = __DEV__ ? configurationCheckWrapper(startMapperUnwrapped) : startMapperUnwrapped;\nexport var makeShareable = __DEV__ ? configurationCheckWrapper(makeShareableUnwrapped) : makeShareableUnwrapped;\nexport var makeMutable = __DEV__ ? configurationCheckWrapper(makeMutableUnwrapped) : makeMutableUnwrapped;\nexport var makeRemote = __DEV__ ? configurationCheckWrapper(makeRemoteUnwrapped) : makeRemoteUnwrapped;\nglobal._WORKLET = false;\nglobal._log = function (s) {\n  console.log(s);\n};\nexport function getViewProp(viewTag, propName) {\n  if (global._IS_FABRIC) {\n    throw new Error('[react-native-reanimated] `getViewProp` is not supported on Fabric yet');\n  }\n  return new Promise(function (resolve, reject) {\n    return NativeReanimatedModule.getViewProp(viewTag, propName, function (result) {\n      if (typeof result === 'string' && result.substr(0, 6) === 'error:') {\n        reject(result);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\nexport function registerEventHandler(eventHash, eventHandler) {\n  function handleAndFlushImmediates(eventTimestamp, event) {\n    'worklet';\n\n    global.__frameTimestamp = eventTimestamp;\n    eventHandler(event);\n    global.__flushAnimationFrame(eventTimestamp);\n    global.__frameTimestamp = undefined;\n  }\n  return NativeReanimatedModule.registerEventHandler(eventHash, makeShareableCloneRecursive(handleAndFlushImmediates));\n}\nexport function unregisterEventHandler(id) {\n  return NativeReanimatedModule.unregisterEventHandler(id);\n}\nexport function subscribeForKeyboardEvents(eventHandler, options) {\n  var _options$isStatusBarT;\n  function handleAndFlushImmediates(state, height) {\n    'worklet';\n\n    var now = performance.now();\n    global.__frameTimestamp = now;\n    eventHandler(state, height);\n    global.__flushAnimationFrame(now);\n    global.__frameTimestamp = undefined;\n  }\n  return NativeReanimatedModule.subscribeForKeyboardEvents(makeShareableCloneRecursive(handleAndFlushImmediates), (_options$isStatusBarT = options.isStatusBarTranslucentAndroid) != null ? _options$isStatusBarT : false);\n}\nexport function unsubscribeFromKeyboardEvents(listenerId) {\n  return NativeReanimatedModule.unsubscribeFromKeyboardEvents(listenerId);\n}\nexport function registerSensor(sensorType, interval, iosReferenceFrame, eventHandler) {\n  return NativeReanimatedModule.registerSensor(sensorType, interval, iosReferenceFrame, makeShareableCloneRecursive(eventHandler));\n}\nexport function unregisterSensor(listenerId) {\n  return NativeReanimatedModule.unregisterSensor(listenerId);\n}\nif (!isWeb() && isConfigured()) {\n  initializeUIRuntime();\n}\nvar featuresConfig = {\n  enableLayoutAnimations: false,\n  setByUser: false\n};\nexport function enableLayoutAnimations(flag) {\n  var isCallByUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (isCallByUser) {\n    featuresConfig = {\n      enableLayoutAnimations: flag,\n      setByUser: true\n    };\n    NativeReanimatedModule.enableLayoutAnimations(flag);\n  } else if (!featuresConfig.setByUser && featuresConfig.enableLayoutAnimations !== flag) {\n    featuresConfig.enableLayoutAnimations = flag;\n    NativeReanimatedModule.enableLayoutAnimations(flag);\n  }\n}\nexport function configureLayoutAnimations(viewTag, type, config) {\n  var sharedTransitionTag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  NativeReanimatedModule.configureLayoutAnimation(viewTag, type, sharedTransitionTag, makeShareableCloneRecursive(config));\n}\nexport function configureProps(uiProps, nativeProps) {\n  if (!nativeShouldBeMock()) {\n    NativeReanimatedModule.configureProps(uiProps, nativeProps);\n  }\n}","map":{"version":3,"mappings":"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","names":["NativeReanimatedModule","nativeShouldBeMock","shouldBeUseWeb","isWeb","makeShareableCloneRecursive","makeShareable","makeShareableUnwrapped","startMapper","startMapperUnwrapped","makeMutable","makeMutableUnwrapped","makeRemote","makeRemoteUnwrapped","initializeUIRuntime","stopMapper","runOnJS","runOnUI","testWorklet","throwUninitializedReanimatedException","Error","checkPluginState","throwError","__workletHash","isConfigured","isConfiguredCheck","configurationCheckWrapper","__DEV__","fn","arguments","global","_WORKLET","_log","s","console","log","getViewProp","viewTag","propName","_IS_FABRIC","Promise","resolve","reject","result","substr","registerEventHandler","eventHash","eventHandler","handleAndFlushImmediates","eventTimestamp","event","__frameTimestamp","__flushAnimationFrame","undefined","unregisterEventHandler","id","subscribeForKeyboardEvents","options","state","height","now","performance","isStatusBarTranslucentAndroid","unsubscribeFromKeyboardEvents","listenerId","registerSensor","sensorType","interval","iosReferenceFrame","unregisterSensor","featuresConfig","enableLayoutAnimations","setByUser","flag","isCallByUser","configureLayoutAnimations","type","config","sharedTransitionTag","configureLayoutAnimation","configureProps","uiProps","nativeProps"],"sources":["core.ts"],"sourcesContent":["import NativeReanimatedModule from './NativeReanimated';\nimport { nativeShouldBeMock, shouldBeUseWeb, isWeb } from './PlatformChecker';\nimport {\n  AnimatedKeyboardOptions,\n  BasicWorkletFunction,\n  Value3D,\n  ValueRotation,\n} from './commonTypes';\nimport {\n  makeShareableCloneRecursive,\n  makeShareable as makeShareableUnwrapped,\n} from './shareables';\nimport { startMapper as startMapperUnwrapped } from './mappers';\nimport {\n  makeMutable as makeMutableUnwrapped,\n  makeRemote as makeRemoteUnwrapped,\n} from './mutables';\nimport {\n  LayoutAnimationFunction,\n  LayoutAnimationType,\n} from './layoutReanimation';\nimport { initializeUIRuntime } from './initializers';\n\nexport { stopMapper } from './mappers';\nexport { runOnJS, runOnUI } from './threads';\n\nexport type ReanimatedConsole = Pick<\n  Console,\n  'debug' | 'log' | 'warn' | 'info' | 'error'\n>;\n\nconst testWorklet: BasicWorkletFunction<void> = () => {\n  'worklet';\n};\n\nconst throwUninitializedReanimatedException = () => {\n  throw new Error(\n    \"Failed to initialize react-native-reanimated library, make sure you followed installation steps here: https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/installation/ \\n1) Make sure reanimated's babel plugin is installed in your babel.config.js (you should have 'react-native-reanimated/plugin' listed there - also see the above link for details) \\n2) Make sure you reset build cache after updating the config, run: yarn start --reset-cache\"\n  );\n};\n\nexport const checkPluginState: (throwError: boolean) => boolean = (\n  throwError = true\n) => {\n  if (!testWorklet.__workletHash && !shouldBeUseWeb()) {\n    if (throwError) {\n      throwUninitializedReanimatedException();\n    }\n    return false;\n  }\n  return true;\n};\n\nexport const isConfigured: (throwError?: boolean) => boolean = (\n  throwError = false\n) => {\n  return checkPluginState(throwError);\n};\n\nexport const isConfiguredCheck: () => void = () => {\n  checkPluginState(true);\n};\n\nconst configurationCheckWrapper = __DEV__\n  ? <T extends Array<any>, U>(fn: (...args: T) => U) => {\n      return (...args: T): U => {\n        isConfigured(true);\n        return fn(...args);\n      };\n    }\n  : <T extends Array<any>, U>(fn: (...args: T) => U) => fn;\n\nexport const startMapper = __DEV__\n  ? configurationCheckWrapper(startMapperUnwrapped)\n  : startMapperUnwrapped;\n\nexport const makeShareable = __DEV__\n  ? configurationCheckWrapper(makeShareableUnwrapped)\n  : makeShareableUnwrapped;\n\nexport const makeMutable = __DEV__\n  ? configurationCheckWrapper(makeMutableUnwrapped)\n  : makeMutableUnwrapped;\n\nexport const makeRemote = __DEV__\n  ? configurationCheckWrapper(makeRemoteUnwrapped)\n  : makeRemoteUnwrapped;\n\nglobal._WORKLET = false;\nglobal._log = function (s: string) {\n  console.log(s);\n};\n\nexport function getViewProp<T>(viewTag: string, propName: string): Promise<T> {\n  if (global._IS_FABRIC) {\n    throw new Error(\n      '[react-native-reanimated] `getViewProp` is not supported on Fabric yet'\n    );\n  }\n\n  return new Promise((resolve, reject) => {\n    return NativeReanimatedModule.getViewProp(\n      viewTag,\n      propName,\n      (result: T) => {\n        if (typeof result === 'string' && result.substr(0, 6) === 'error:') {\n          reject(result);\n        } else {\n          resolve(result);\n        }\n      }\n    );\n  });\n}\n\nexport function registerEventHandler<T>(\n  eventHash: string,\n  eventHandler: (event: T) => void\n): string {\n  function handleAndFlushImmediates(eventTimestamp: number, event: T) {\n    'worklet';\n    global.__frameTimestamp = eventTimestamp;\n    eventHandler(event);\n    global.__flushAnimationFrame(eventTimestamp);\n    global.__frameTimestamp = undefined;\n  }\n  return NativeReanimatedModule.registerEventHandler(\n    eventHash,\n    makeShareableCloneRecursive(handleAndFlushImmediates)\n  );\n}\n\nexport function unregisterEventHandler(id: string): void {\n  return NativeReanimatedModule.unregisterEventHandler(id);\n}\n\nexport function subscribeForKeyboardEvents(\n  eventHandler: (state: number, height: number) => void,\n  options: AnimatedKeyboardOptions\n): number {\n  // TODO: this should really go with the same code path as other events, that is\n  // via registerEventHandler. For now we are copying the code from there.\n  function handleAndFlushImmediates(state: number, height: number) {\n    'worklet';\n    const now = performance.now();\n    global.__frameTimestamp = now;\n    eventHandler(state, height);\n    global.__flushAnimationFrame(now);\n    global.__frameTimestamp = undefined;\n  }\n  return NativeReanimatedModule.subscribeForKeyboardEvents(\n    makeShareableCloneRecursive(handleAndFlushImmediates),\n    options.isStatusBarTranslucentAndroid ?? false\n  );\n}\n\nexport function unsubscribeFromKeyboardEvents(listenerId: number): void {\n  return NativeReanimatedModule.unsubscribeFromKeyboardEvents(listenerId);\n}\n\nexport function registerSensor(\n  sensorType: number,\n  interval: number,\n  iosReferenceFrame: number,\n  eventHandler: (\n    data: Value3D | ValueRotation,\n    orientationDegrees: number\n  ) => void\n): number {\n  return NativeReanimatedModule.registerSensor(\n    sensorType,\n    interval,\n    iosReferenceFrame,\n    makeShareableCloneRecursive(eventHandler)\n  );\n}\n\nexport function unregisterSensor(listenerId: number): void {\n  return NativeReanimatedModule.unregisterSensor(listenerId);\n}\n\n// initialize UI runtime if applicable\nif (!isWeb() && isConfigured()) {\n  initializeUIRuntime();\n}\n\ntype FeaturesConfig = {\n  enableLayoutAnimations: boolean;\n  setByUser: boolean;\n};\n\nlet featuresConfig: FeaturesConfig = {\n  enableLayoutAnimations: false,\n  setByUser: false,\n};\n\nexport function enableLayoutAnimations(\n  flag: boolean,\n  isCallByUser = true\n): void {\n  if (isCallByUser) {\n    featuresConfig = {\n      enableLayoutAnimations: flag,\n      setByUser: true,\n    };\n    NativeReanimatedModule.enableLayoutAnimations(flag);\n  } else if (\n    !featuresConfig.setByUser &&\n    featuresConfig.enableLayoutAnimations !== flag\n  ) {\n    featuresConfig.enableLayoutAnimations = flag;\n    NativeReanimatedModule.enableLayoutAnimations(flag);\n  }\n}\n\nexport function configureLayoutAnimations(\n  viewTag: number,\n  type: LayoutAnimationType,\n  config: LayoutAnimationFunction | Keyframe,\n  sharedTransitionTag = ''\n): void {\n  NativeReanimatedModule.configureLayoutAnimation(\n    viewTag,\n    type,\n    sharedTransitionTag,\n    makeShareableCloneRecursive(config)\n  );\n}\n\nexport function configureProps(uiProps: string[], nativeProps: string[]): void {\n  if (!nativeShouldBeMock()) {\n    NativeReanimatedModule.configureProps(uiProps, nativeProps);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}