{"ast":null,"code":"import findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { isChromeDebugger, isWeb, shouldBeUseWeb } from \"./PlatformChecker\";\nexport function getTag(view) {\n  return findNodeHandle(view);\n}\nvar isNative = !shouldBeUseWeb();\nexport var measure;\nif (isWeb()) {\n  measure = function measure(animatedRef) {\n    var element = animatedRef();\n    var viewportOffset = element.getBoundingClientRect();\n    return {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      pageX: viewportOffset.left,\n      pageY: viewportOffset.top\n    };\n  };\n} else if (isChromeDebugger()) {\n  measure = function measure(_animatedRef) {\n    console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n    return null;\n  };\n} else {\n  measure = function measure(animatedRef) {\n    'worklet';\n\n    if (!_WORKLET) {\n      console.warn('[Reanimated] measure() was called from the main JS context. Measure is ' + 'only available in the UI runtime. This may also happen if measure() ' + 'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle ' + 'calls the given worklet on the JS runtime during render. If you want to ' + 'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will ' + 'only be called on the UI runtime after the render has been completed.');\n      return null;\n    }\n    var viewTag = animatedRef();\n    if (viewTag === -1) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n      return null;\n    }\n    var measured = _measure(viewTag);\n    if (measured === null) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" has some undefined, not-yet-computed or meaningless value of `LayoutMetrics` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n      return null;\n    } else if (measured.x === -1234567) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" returned an invalid measurement response.\");\n      return null;\n    } else if (isNaN(measured.x)) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" gets view-flattened on Android. To disable view-flattening, set `collapsable={false}` on this component.\");\n      return null;\n    } else {\n      return measured;\n    }\n  };\n}\nexport function dispatchCommand(animatedRef, commandName, args) {\n  'worklet';\n\n  if (!_WORKLET || !isNative) {\n    return;\n  }\n  var shadowNodeWrapper = animatedRef();\n  _dispatchCommand(shadowNodeWrapper, commandName, args);\n}\nexport var scrollTo;\nif (isWeb()) {\n  scrollTo = function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n\n    var element = animatedRef();\n    element.scrollTo({\n      x: x,\n      y: y,\n      animated: animated\n    });\n  };\n} else if (isNative && global._IS_FABRIC) {\n  scrollTo = function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n\n    dispatchCommand(animatedRef, 'scrollTo', [x, y, animated]);\n  };\n} else if (isNative) {\n  scrollTo = function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n\n    if (!_WORKLET) {\n      return;\n    }\n    var viewTag = animatedRef();\n    _scrollTo(viewTag, x, y, animated);\n  };\n} else {\n  scrollTo = function scrollTo(_animatedRef, _x, _y) {};\n}\nexport function setGestureState(handlerTag, newState) {\n  'worklet';\n\n  if (!_WORKLET || !isNative) {\n    console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n    return;\n  }\n  _setGestureState(handlerTag, newState);\n}","map":{"version":3,"mappings":"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","names":["isChromeDebugger","isWeb","shouldBeUseWeb","getTag","view","findNodeHandle","isNative","measure","animatedRef","element","viewportOffset","getBoundingClientRect","width","offsetWidth","height","offsetHeight","x","offsetLeft","y","offsetTop","pageX","left","pageY","top","_animatedRef","console","warn","_WORKLET","viewTag","measured","_measure","isNaN","dispatchCommand","commandName","args","shadowNodeWrapper","_dispatchCommand","scrollTo","animated","global","_IS_FABRIC","_scrollTo","_x","_y","setGestureState","handlerTag","newState","_setGestureState"],"sources":["NativeMethods.ts"],"sourcesContent":["/* global _WORKLET _measure _scrollTo _dispatchCommand _setGestureState */\nimport { Component } from 'react';\nimport { findNodeHandle } from 'react-native';\nimport { MeasuredDimensions } from './commonTypes';\nimport { RefObjectFunction } from './hook/commonTypes';\nimport { isChromeDebugger, isWeb, shouldBeUseWeb } from './PlatformChecker';\n\nexport function getTag(\n  view: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number {\n  return findNodeHandle(view);\n}\n\nconst isNative = !shouldBeUseWeb();\n\nexport let measure: (\n  animatedRef: RefObjectFunction<Component>\n) => MeasuredDimensions | null;\n\nif (isWeb()) {\n  measure = (animatedRef: RefObjectFunction<Component>) => {\n    const element = animatedRef() as unknown as HTMLElement; // TODO: fix typing of animated refs on web\n    const viewportOffset = element.getBoundingClientRect();\n    return {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      pageX: viewportOffset.left,\n      pageY: viewportOffset.top,\n    };\n  };\n} else if (isChromeDebugger()) {\n  measure = (_animatedRef: RefObjectFunction<Component>) => {\n    console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n    return null;\n  };\n} else {\n  measure = (animatedRef: RefObjectFunction<Component>) => {\n    'worklet';\n    if (!_WORKLET) {\n      console.warn(\n        '[Reanimated] measure() was called from the main JS context. Measure is ' +\n          'only available in the UI runtime. This may also happen if measure() ' +\n          'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle ' +\n          'calls the given worklet on the JS runtime during render. If you want to ' +\n          'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will ' +\n          'only be called on the UI runtime after the render has been completed.'\n      );\n      return null;\n    }\n\n    const viewTag = animatedRef();\n    if (viewTag === -1) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`\n      );\n      return null;\n    }\n\n    const measured = _measure(viewTag);\n    if (measured === null) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \\`LayoutMetrics\\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`\n      );\n      return null;\n    } else if (measured.x === -1234567) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} returned an invalid measurement response.`\n      );\n      return null;\n    } else if (isNaN(measured.x)) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \\`collapsable={false}\\` on this component.`\n      );\n      return null;\n    } else {\n      return measured;\n    }\n  };\n}\n\nexport function dispatchCommand(\n  animatedRef: RefObjectFunction<Component>,\n  commandName: string,\n  args: Array<unknown>\n): void {\n  'worklet';\n  if (!_WORKLET || !isNative) {\n    return;\n  }\n  const shadowNodeWrapper = animatedRef();\n  _dispatchCommand(shadowNodeWrapper, commandName, args);\n}\n\nexport let scrollTo: (\n  animatedRef: RefObjectFunction<Component>,\n  x: number,\n  y: number,\n  animated: boolean\n) => void;\n\nif (isWeb()) {\n  scrollTo = (\n    animatedRef: RefObjectFunction<Component>,\n    x: number,\n    y: number,\n    animated: boolean\n  ) => {\n    'worklet';\n    const element = animatedRef() as unknown as HTMLElement;\n    // @ts-ignore same call as in react-native-web\n    element.scrollTo({ x, y, animated });\n  };\n} else if (isNative && global._IS_FABRIC) {\n  scrollTo = (\n    animatedRef: RefObjectFunction<Component>,\n    x: number,\n    y: number,\n    animated: boolean\n  ) => {\n    'worklet';\n    dispatchCommand(animatedRef, 'scrollTo', [x, y, animated]);\n  };\n} else if (isNative) {\n  scrollTo = (\n    animatedRef: RefObjectFunction<Component>,\n    x: number,\n    y: number,\n    animated: boolean\n  ) => {\n    'worklet';\n    if (!_WORKLET) {\n      return;\n    }\n    const viewTag = animatedRef();\n    _scrollTo(viewTag, x, y, animated);\n  };\n} else {\n  scrollTo = (\n    _animatedRef: RefObjectFunction<Component>,\n    _x: number,\n    _y: number\n  ) => {\n    // no-op\n  };\n}\n\nexport function setGestureState(handlerTag: number, newState: number): void {\n  'worklet';\n  if (!_WORKLET || !isNative) {\n    console.warn(\n      '[Reanimated] You can not use setGestureState in non-worklet function.'\n    );\n    return;\n  }\n  _setGestureState(handlerTag, newState);\n}\n"]},"metadata":{},"sourceType":"module"}