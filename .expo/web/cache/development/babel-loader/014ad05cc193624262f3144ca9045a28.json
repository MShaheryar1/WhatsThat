{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { Easing } from \"../../Easing\";\nimport { withDelay, withSequence, withTiming } from \"../../animation\";\nexport var Keyframe = function () {\n  function Keyframe(definitions) {\n    var _this = this;\n    _classCallCheck(this, Keyframe);\n    _defineProperty(this, \"durationV\", void 0);\n    _defineProperty(this, \"delayV\", void 0);\n    _defineProperty(this, \"callbackV\", void 0);\n    _defineProperty(this, \"definitions\", void 0);\n    _defineProperty(this, \"build\", function () {\n      var delay = _this.delayV;\n      var delayFunction = _this.getDelayFunction();\n      var _this$parseDefinition = _this.parseDefinitions(),\n        keyframes = _this$parseDefinition.keyframes,\n        initialValues = _this$parseDefinition.initialValues;\n      var callback = _this.callbackV;\n      return function (_targetValues) {\n        'worklet';\n\n        var animations = {};\n        var addAnimation = function addAnimation(key) {\n          var keyframePoints = keyframes[key];\n          if (keyframePoints.length === 0) return;\n          var animation = delayFunction(delay, keyframePoints.length === 1 ? withTiming(keyframePoints[0].value, {\n            duration: keyframePoints[0].duration,\n            easing: keyframePoints[0].easing ? keyframePoints[0].easing : Easing.linear\n          }) : withSequence.apply(_this, keyframePoints.map(function (keyframePoint) {\n            return withTiming(keyframePoint.value, {\n              duration: keyframePoint.duration,\n              easing: keyframePoint.easing ? keyframePoint.easing : Easing.linear\n            });\n          })));\n          if (key.includes('transform')) {\n            var _animations$transform;\n            if (!('transform' in animations)) {\n              animations.transform = [];\n            }\n            (_animations$transform = animations.transform) === null || _animations$transform === void 0 ? void 0 : _animations$transform.push(_defineProperty2({}, key.split(':')[1], animation));\n          } else {\n            animations[key] = animation;\n          }\n        };\n        Object.keys(initialValues).forEach(function (key) {\n          if (key.includes('transform')) {\n            initialValues[key].forEach(function (transformProp, index) {\n              Object.keys(transformProp).forEach(function (transformPropKey) {\n                addAnimation(index.toString() + '_transform:' + transformPropKey);\n              });\n            });\n          } else {\n            addAnimation(key);\n          }\n        });\n        return {\n          animations: animations,\n          initialValues: initialValues,\n          callback: callback\n        };\n      };\n    });\n    this.definitions = definitions;\n  }\n  _createClass(Keyframe, [{\n    key: \"parseDefinitions\",\n    value: function parseDefinitions() {\n      var _this2 = this;\n      var parsedKeyframes = {};\n      if (this.definitions.from) {\n        if (this.definitions['0']) {\n          throw Error(\"You cannot provide both keyframe 0 and 'from' as they both specified initial values\");\n        }\n        this.definitions['0'] = this.definitions.from;\n        delete this.definitions.from;\n      }\n      if (this.definitions.to) {\n        if (this.definitions['100']) {\n          throw Error(\"You cannot provide both keyframe 100 and 'to' as they both specified values at the end of the animation.\");\n        }\n        this.definitions['100'] = this.definitions.to;\n        delete this.definitions.to;\n      }\n      if (!this.definitions['0']) {\n        throw Error(\"Please provide 0, or 'from' keyframe with initial state of your object.\");\n      }\n      var initialValues = this.definitions['0'];\n      Object.keys(initialValues).forEach(function (styleProp) {\n        if (styleProp === 'transform') {\n          var _initialValues$styleP;\n          (_initialValues$styleP = initialValues[styleProp]) === null || _initialValues$styleP === void 0 ? void 0 : _initialValues$styleP.forEach(function (transformStyle, index) {\n            Object.keys(transformStyle).forEach(function (transformProp) {\n              parsedKeyframes[index.toString() + '_transform:' + transformProp] = [];\n            });\n          });\n        } else {\n          parsedKeyframes[styleProp] = [];\n        }\n      });\n      var duration = this.durationV ? this.durationV : 500;\n      var animationKeyPoints = Array.from(Object.keys(this.definitions));\n      var getAnimationDuration = function getAnimationDuration(key, currentKeyPoint) {\n        var maxDuration = currentKeyPoint / 100 * duration;\n        var currentDuration = parsedKeyframes[key].reduce(function (acc, value) {\n          return acc + value.duration;\n        }, 0);\n        return maxDuration - currentDuration;\n      };\n      var addKeyPoint = function addKeyPoint(_ref) {\n        var key = _ref.key,\n          value = _ref.value,\n          currentKeyPoint = _ref.currentKeyPoint,\n          easing = _ref.easing;\n        if (!(key in parsedKeyframes)) {\n          throw Error(\"Keyframe can contain only that set of properties that were provide with initial values (keyframe 0 or 'from')\");\n        }\n        parsedKeyframes[key].push({\n          duration: getAnimationDuration(key, currentKeyPoint),\n          value: value,\n          easing: easing\n        });\n      };\n      animationKeyPoints.filter(function (value) {\n        return parseInt(value) !== 0;\n      }).sort(function (a, b) {\n        return parseInt(a) - parseInt(b);\n      }).forEach(function (keyPoint) {\n        if (parseInt(keyPoint) < 0 || parseInt(keyPoint) > 100) {\n          throw Error('Keyframe should be in between range 0 - 100.');\n        }\n        var keyframe = _this2.definitions[keyPoint];\n        var easing = keyframe.easing;\n        delete keyframe.easing;\n        var addKeyPointWith = function addKeyPointWith(key, value) {\n          return addKeyPoint({\n            key: key,\n            value: value,\n            currentKeyPoint: parseInt(keyPoint),\n            easing: easing\n          });\n        };\n        Object.keys(keyframe).forEach(function (key) {\n          if (key === 'transform') {\n            var _keyframe$key;\n            (_keyframe$key = keyframe[key]) === null || _keyframe$key === void 0 ? void 0 : _keyframe$key.forEach(function (transformStyle, index) {\n              Object.keys(transformStyle).forEach(function (transformProp) {\n                addKeyPointWith(index.toString() + '_transform:' + transformProp, transformStyle[transformProp]);\n              });\n            });\n          } else {\n            addKeyPointWith(key, keyframe[key]);\n          }\n        });\n      });\n      return {\n        initialValues: initialValues,\n        keyframes: parsedKeyframes\n      };\n    }\n  }, {\n    key: \"duration\",\n    value: function duration(durationMs) {\n      this.durationV = durationMs;\n      return this;\n    }\n  }, {\n    key: \"delay\",\n    value: function delay(delayMs) {\n      this.delayV = delayMs;\n      return this;\n    }\n  }, {\n    key: \"withCallback\",\n    value: function withCallback(callback) {\n      this.callbackV = callback;\n      return this;\n    }\n  }, {\n    key: \"getDelayFunction\",\n    value: function getDelayFunction() {\n      var delay = this.delayV;\n      return delay ? withDelay : function (_, animation) {\n        'worklet';\n\n        return animation;\n      };\n    }\n  }]);\n  return Keyframe;\n}();","map":{"version":3,"mappings":"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","names":["Easing","withDelay","withSequence","withTiming","Keyframe","constructor","definitions","_defineProperty","delay","delayV","delayFunction","getDelayFunction","parseDefinitions","keyframes","initialValues","callback","callbackV","_targetValues","animations","addAnimation","key","keyframePoints","length","animation","value","duration","easing","linear","apply","map","keyframePoint","includes","transform","push","split","Object","keys","forEach","transformProp","index","transformPropKey","toString","parsedKeyframes","from","Error","to","styleProp","transformStyle","durationV","animationKeyPoints","Array","getAnimationDuration","currentKeyPoint","maxDuration","currentDuration","reduce","acc","addKeyPoint","_ref","filter","parseInt","sort","a","b","keyPoint","keyframe","addKeyPointWith","durationMs","delayMs","withCallback","_"],"sources":["Keyframe.ts"],"sourcesContent":["import { Easing, EasingFn } from '../../Easing';\nimport { withDelay, withSequence, withTiming } from '../../animation';\nimport {\n  AnimationFunction,\n  EntryExitAnimationFunction,\n  IEntryExitAnimationBuilder,\n  KeyframeProps,\n} from './commonTypes';\nimport { TransformProperty, StyleProps } from '../../commonTypes';\nexport interface KeyframePoint {\n  duration: number;\n  value: number | string;\n  easing?: EasingFn;\n}\nexport interface ParsedKeyframesDefinition {\n  initialValues: StyleProps;\n  keyframes: Record<string, KeyframePoint[]>;\n}\nexport class Keyframe implements IEntryExitAnimationBuilder {\n  durationV?: number;\n  delayV?: number;\n  callbackV?: (finished: boolean) => void;\n  definitions: Record<string, KeyframeProps>;\n\n  /*\n    Keyframe definition should be passed in the constructor as the map\n    which keys are between range 0 - 100 (%) and correspond to the point in the animation progress.\n  */\n  constructor(definitions: Record<string, KeyframeProps>) {\n    this.definitions = definitions;\n  }\n\n  private parseDefinitions(): ParsedKeyframesDefinition {\n    /* \n        Each style property contain an array with all their key points: \n        value, duration of transition to that value, and optional easing function (defaults to Linear)\n    */\n    const parsedKeyframes: Record<string, KeyframePoint[]> = {};\n    /*\n      Parsing keyframes 'from' and 'to'.\n    */\n    if (this.definitions.from) {\n      if (this.definitions['0']) {\n        throw Error(\n          \"You cannot provide both keyframe 0 and 'from' as they both specified initial values\"\n        );\n      }\n      this.definitions['0'] = this.definitions.from;\n      delete this.definitions.from;\n    }\n    if (this.definitions.to) {\n      if (this.definitions['100']) {\n        throw Error(\n          \"You cannot provide both keyframe 100 and 'to' as they both specified values at the end of the animation.\"\n        );\n      }\n      this.definitions['100'] = this.definitions.to;\n      delete this.definitions.to;\n    }\n    /* \n       One of the assumptions is that keyframe  0 is required to properly set initial values.\n       Every other keyframe should contain properties from the set provided as initial values.\n    */\n    if (!this.definitions['0']) {\n      throw Error(\n        \"Please provide 0, or 'from' keyframe with initial state of your object.\"\n      );\n    }\n    const initialValues: StyleProps = this.definitions['0'] as StyleProps;\n    /*\n      Initialize parsedKeyframes for properties provided in initial keyframe\n    */\n    Object.keys(initialValues).forEach((styleProp: string) => {\n      if (styleProp === 'transform') {\n        initialValues[styleProp]?.forEach((transformStyle, index) => {\n          Object.keys(transformStyle).forEach((transformProp: string) => {\n            parsedKeyframes[index.toString() + '_transform:' + transformProp] =\n              [];\n          });\n        });\n      } else {\n        parsedKeyframes[styleProp] = [];\n      }\n    });\n\n    const duration: number = this.durationV ? this.durationV : 500;\n    const animationKeyPoints: Array<string> = Array.from(\n      Object.keys(this.definitions)\n    );\n\n    const getAnimationDuration = (\n      key: string,\n      currentKeyPoint: number\n    ): number => {\n      const maxDuration = (currentKeyPoint / 100) * duration;\n      const currentDuration = parsedKeyframes[key].reduce(\n        (acc: number, value: KeyframePoint) => acc + value.duration,\n        0\n      );\n      return maxDuration - currentDuration;\n    };\n\n    /* \n       Other keyframes can't contain properties that were not specified in initial keyframe.\n    */\n    const addKeyPoint = ({\n      key,\n      value,\n      currentKeyPoint,\n      easing,\n    }: {\n      key: string;\n      value: string | number;\n      currentKeyPoint: number;\n      easing?: EasingFn;\n    }): void => {\n      if (!(key in parsedKeyframes)) {\n        throw Error(\n          \"Keyframe can contain only that set of properties that were provide with initial values (keyframe 0 or 'from')\"\n        );\n      }\n      parsedKeyframes[key].push({\n        duration: getAnimationDuration(key, currentKeyPoint),\n        value: value,\n        easing: easing,\n      });\n    };\n    animationKeyPoints\n      .filter((value: string) => parseInt(value) !== 0)\n      .sort((a: string, b: string) => parseInt(a) - parseInt(b))\n      .forEach((keyPoint: string) => {\n        if (parseInt(keyPoint) < 0 || parseInt(keyPoint) > 100) {\n          throw Error('Keyframe should be in between range 0 - 100.');\n        }\n        const keyframe: KeyframeProps = this.definitions[keyPoint];\n        const easing = keyframe.easing;\n        delete keyframe.easing;\n        const addKeyPointWith = (key: string, value: string | number) =>\n          addKeyPoint({\n            key,\n            value,\n            currentKeyPoint: parseInt(keyPoint),\n            easing,\n          });\n        Object.keys(keyframe).forEach((key: string) => {\n          if (key === 'transform') {\n            keyframe[key]?.forEach(\n              (transformStyle: { [key: string]: any }, index) => {\n                Object.keys(transformStyle).forEach((transformProp: string) => {\n                  addKeyPointWith(\n                    index.toString() + '_transform:' + transformProp,\n                    transformStyle[transformProp]\n                  );\n                });\n              }\n            );\n          } else {\n            addKeyPointWith(key, keyframe[key]);\n          }\n        });\n      });\n    return { initialValues: initialValues, keyframes: parsedKeyframes };\n  }\n\n  duration(durationMs: number): Keyframe {\n    this.durationV = durationMs;\n    return this;\n  }\n\n  delay(delayMs: number): Keyframe {\n    this.delayV = delayMs;\n    return this;\n  }\n\n  withCallback(callback: (finsihed: boolean) => void): Keyframe {\n    this.callbackV = callback;\n    return this;\n  }\n\n  private getDelayFunction(): AnimationFunction {\n    const delay = this.delayV;\n    return delay\n      ? withDelay\n      : (_, animation) => {\n          'worklet';\n          return animation;\n        };\n  }\n\n  build = (): EntryExitAnimationFunction => {\n    const delay = this.delayV;\n    const delayFunction = this.getDelayFunction();\n    const { keyframes, initialValues } = this.parseDefinitions();\n    const callback = this.callbackV;\n\n    return (_targetValues) => {\n      'worklet';\n      const animations: StyleProps = {};\n\n      /* \n            For each style property, an animations sequence is created that corresponds with its key points.\n            Transform style properties require special handling because of their nested structure.\n      */\n      const addAnimation = (key: string) => {\n        const keyframePoints = keyframes[key];\n        // in case if property was only passed as initial value\n        if (keyframePoints.length === 0) return;\n        const animation = delayFunction(\n          delay,\n          keyframePoints.length === 1\n            ? withTiming(keyframePoints[0].value, {\n                duration: keyframePoints[0].duration,\n                easing: keyframePoints[0].easing\n                  ? keyframePoints[0].easing\n                  : Easing.linear,\n              })\n            : withSequence.apply(\n                this,\n                keyframePoints.map((keyframePoint: KeyframePoint) =>\n                  withTiming(keyframePoint.value, {\n                    duration: keyframePoint.duration,\n                    easing: keyframePoint.easing\n                      ? keyframePoint.easing\n                      : Easing.linear,\n                  })\n                )\n              )\n        );\n        if (key.includes('transform')) {\n          if (!('transform' in animations)) {\n            animations.transform = [];\n          }\n          animations.transform?.push(<TransformProperty>{\n            [key.split(':')[1]]: animation,\n          });\n        } else {\n          animations[key] = animation;\n        }\n      };\n      Object.keys(initialValues).forEach((key: string) => {\n        if (key.includes('transform')) {\n          initialValues[key].forEach(\n            (transformProp: Record<string, number | string>, index: number) => {\n              Object.keys(transformProp).forEach((transformPropKey: string) => {\n                addAnimation(\n                  index.toString() + '_transform:' + transformPropKey\n                );\n              });\n            }\n          );\n        } else {\n          addAnimation(key);\n        }\n      });\n      return {\n        animations: animations,\n        initialValues: initialValues,\n        callback: callback,\n      };\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}