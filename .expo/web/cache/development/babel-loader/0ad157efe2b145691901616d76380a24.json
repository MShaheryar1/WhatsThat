{"ast":null,"code":"import { useEvent, useHandler } from \"./Hooks\";\nexport function useAnimatedScrollHandler(handlers, dependencies) {\n  var scrollHandlers = typeof handlers === 'function' ? {\n    onScroll: handlers\n  } : handlers;\n  var _useHandler = useHandler(scrollHandlers, dependencies),\n    context = _useHandler.context,\n    doDependenciesDiffer = _useHandler.doDependenciesDiffer;\n  var subscribeForEvents = ['onScroll'];\n  if (scrollHandlers.onBeginDrag !== undefined) {\n    subscribeForEvents.push('onScrollBeginDrag');\n  }\n  if (scrollHandlers.onEndDrag !== undefined) {\n    subscribeForEvents.push('onScrollEndDrag');\n  }\n  if (scrollHandlers.onMomentumBegin !== undefined) {\n    subscribeForEvents.push('onMomentumScrollBegin');\n  }\n  if (scrollHandlers.onMomentumEnd !== undefined) {\n    subscribeForEvents.push('onMomentumScrollEnd');\n  }\n  return useEvent(function (event) {\n    'worklet';\n\n    var onScroll = scrollHandlers.onScroll,\n      onBeginDrag = scrollHandlers.onBeginDrag,\n      onEndDrag = scrollHandlers.onEndDrag,\n      onMomentumBegin = scrollHandlers.onMomentumBegin,\n      onMomentumEnd = scrollHandlers.onMomentumEnd;\n    if (onScroll && event.eventName.endsWith('onScroll')) {\n      onScroll(event, context);\n    } else if (onBeginDrag && event.eventName.endsWith('onScrollBeginDrag')) {\n      onBeginDrag(event, context);\n    } else if (onEndDrag && event.eventName.endsWith('onScrollEndDrag')) {\n      onEndDrag(event, context);\n    } else if (onMomentumBegin && event.eventName.endsWith('onMomentumScrollBegin')) {\n      onMomentumBegin(event, context);\n    } else if (onMomentumEnd && event.eventName.endsWith('onMomentumScrollEnd')) {\n      onMomentumEnd(event, context);\n    }\n  }, subscribeForEvents, doDependenciesDiffer);\n}","map":{"version":3,"mappings":"AAKA,SAASA,QAAT,EAAmBC,UAAnB;AAqBA,OAAO,SAASC,wBAAT,CACLC,QADK,EAELC,YAFK,EAGwC;EAE7C,IAAMC,cAAwC,GAC5C,OAAOF,QAAP,KAAoB,UAApB,GAAiC;IAAEG,QAAQ,EAAEH;EAAZ,CAAjC,GAA0DA,QAD5D;EAEA,kBAA0CF,UAAU,CAClDI,cADkD,EAElDD,YAFkD,CAApD;IAAQG,OAAF,eAAEA,OAAF;IAAWC;EAMjB,IAAMC,kBAAkB,GAAG,CAAC,UAAD,CAA3B;EACA,IAAIJ,cAAc,CAACK,WAAf,KAA+BC,SAAnC,EAA8C;IAC5CF,kBAAkB,CAACG,IAAnB,CAAwB,mBAAxB;EACD;EACD,IAAIP,cAAc,CAACQ,SAAf,KAA6BF,SAAjC,EAA4C;IAC1CF,kBAAkB,CAACG,IAAnB,CAAwB,iBAAxB;EACD;EACD,IAAIP,cAAc,CAACS,eAAf,KAAmCH,SAAvC,EAAkD;IAChDF,kBAAkB,CAACG,IAAnB,CAAwB,uBAAxB;EACD;EACD,IAAIP,cAAc,CAACU,aAAf,KAAiCJ,SAArC,EAAgD;IAC9CF,kBAAkB,CAACG,IAAnB,CAAwB,qBAAxB;EACD;EAED,OAAOZ,QAAQ,CACZgB,eAAD,EAAwB;IACtB;;IACA,IACEV,QADI,GAMFD,cANJ,CACEC,QADI;MAEJI,WAFI,GAMFL,cANJ,CAEEK,WAFI;MAGJG,SAHI,GAMFR,cANJ,CAGEQ,SAHI;MAIJC,eAJI,GAMFT,cANJ,CAIES,eAJI;MAKJC,gBACEV,cANJ,CAKEU;IAEF,IAAIT,QAAQ,IAAIU,KAAK,CAACC,SAAN,CAAgBC,QAAhB,CAAyB,UAAzB,CAAhB,EAAsD;MACpDZ,QAAQ,CAACU,KAAD,EAAQT,OAAR,CAAR;IACD,CAFD,MAEO,IAAIG,WAAW,IAAIM,KAAK,CAACC,SAAN,CAAgBC,QAAhB,CAAyB,mBAAzB,CAAnB,EAAkE;MACvER,WAAW,CAACM,KAAD,EAAQT,OAAR,CAAX;IACD,CAFM,MAEA,IAAIM,SAAS,IAAIG,KAAK,CAACC,SAAN,CAAgBC,QAAhB,CAAyB,iBAAzB,CAAjB,EAA8D;MACnEL,SAAS,CAACG,KAAD,EAAQT,OAAR,CAAT;IACD,CAFM,MAEA,IACLO,eAAe,IACfE,KAAK,CAACC,SAAN,CAAgBC,QAAhB,CAAyB,uBAAzB,CAFK,EAGL;MACAJ,eAAe,CAACE,KAAD,EAAQT,OAAR,CAAf;IACD,CALM,MAKA,IACLQ,aAAa,IACbC,KAAK,CAACC,SAAN,CAAgBC,QAAhB,CAAyB,qBAAzB,CAFK,EAGL;MACAH,aAAa,CAACC,KAAD,EAAQT,OAAR,CAAb;IACD;EACF,CA3BY,EA4BbE,kBA5Ba,EA6BbD,oBA7Ba,CAAf;AA+BD","names":["useEvent","useHandler","useAnimatedScrollHandler","handlers","dependencies","scrollHandlers","onScroll","context","doDependenciesDiffer","subscribeForEvents","onBeginDrag","undefined","push","onEndDrag","onMomentumBegin","onMomentumEnd","event","eventName","endsWith"],"sources":["useAnimatedScrollHandler.ts"],"sourcesContent":["import { RefObject } from 'react';\nimport { NativeScrollEvent } from 'react-native';\nimport { Context, NativeEvent, WorkletFunction } from '../commonTypes';\nimport WorkletEventHandler from '../WorkletEventHandler';\nimport { DependencyList } from './commonTypes';\nimport { useEvent, useHandler } from './Hooks';\n\nexport interface ScrollHandler<TContext extends Context>\n  extends WorkletFunction {\n  (event: NativeScrollEvent, context?: TContext): void;\n}\n\nexport interface ScrollEvent\n  extends NativeScrollEvent,\n    NativeEvent<ScrollEvent> {\n  eventName: string;\n}\nexport interface ScrollHandlers<TContext extends Context> {\n  [key: string]: ScrollHandler<TContext> | undefined;\n  onScroll?: ScrollHandler<TContext>;\n  onBeginDrag?: ScrollHandler<TContext>;\n  onEndDrag?: ScrollHandler<TContext>;\n  onMomentumBegin?: ScrollHandler<TContext>;\n  onMomentumEnd?: ScrollHandler<TContext>;\n}\n\nexport function useAnimatedScrollHandler<TContext extends Context>(\n  handlers: ScrollHandlers<TContext> | ScrollHandler<TContext>,\n  dependencies?: DependencyList\n): RefObject<WorkletEventHandler<ScrollEvent>> {\n  // case when handlers is a function\n  const scrollHandlers: ScrollHandlers<TContext> =\n    typeof handlers === 'function' ? { onScroll: handlers } : handlers;\n  const { context, doDependenciesDiffer } = useHandler<ScrollEvent, TContext>(\n    scrollHandlers,\n    dependencies\n  );\n\n  // build event subscription array\n  const subscribeForEvents = ['onScroll'];\n  if (scrollHandlers.onBeginDrag !== undefined) {\n    subscribeForEvents.push('onScrollBeginDrag');\n  }\n  if (scrollHandlers.onEndDrag !== undefined) {\n    subscribeForEvents.push('onScrollEndDrag');\n  }\n  if (scrollHandlers.onMomentumBegin !== undefined) {\n    subscribeForEvents.push('onMomentumScrollBegin');\n  }\n  if (scrollHandlers.onMomentumEnd !== undefined) {\n    subscribeForEvents.push('onMomentumScrollEnd');\n  }\n\n  return useEvent<ScrollEvent>(\n    (event: ScrollEvent) => {\n      'worklet';\n      const {\n        onScroll,\n        onBeginDrag,\n        onEndDrag,\n        onMomentumBegin,\n        onMomentumEnd,\n      } = scrollHandlers;\n      if (onScroll && event.eventName.endsWith('onScroll')) {\n        onScroll(event, context);\n      } else if (onBeginDrag && event.eventName.endsWith('onScrollBeginDrag')) {\n        onBeginDrag(event, context);\n      } else if (onEndDrag && event.eventName.endsWith('onScrollEndDrag')) {\n        onEndDrag(event, context);\n      } else if (\n        onMomentumBegin &&\n        event.eventName.endsWith('onMomentumScrollBegin')\n      ) {\n        onMomentumBegin(event, context);\n      } else if (\n        onMomentumEnd &&\n        event.eventName.endsWith('onMomentumScrollEnd')\n      ) {\n        onMomentumEnd(event, context);\n      }\n    },\n    subscribeForEvents,\n    doDependenciesDiffer\n  );\n}\n"]},"metadata":{},"sourceType":"module"}