{"ast":null,"code":"import { defineAnimation } from \"./util\";\nexport function withSpring(toValue, userConfig, callback) {\n  'worklet';\n\n  return defineAnimation(toValue, function () {\n    'worklet';\n    var config = {\n      damping: 10,\n      mass: 1,\n      stiffness: 100,\n      overshootClamping: false,\n      restDisplacementThreshold: 0.01,\n      restSpeedThreshold: 2,\n      velocity: 0\n    };\n    if (userConfig) {\n      Object.keys(userConfig).forEach(function (key) {\n        return config[key] = userConfig[key];\n      });\n    }\n    function spring(animation, now) {\n      var toValue = animation.toValue,\n        lastTimestamp = animation.lastTimestamp,\n        current = animation.current,\n        velocity = animation.velocity;\n      var deltaTime = Math.min(now - lastTimestamp, 64);\n      animation.lastTimestamp = now;\n      var c = config.damping;\n      var m = config.mass;\n      var k = config.stiffness;\n      var v0 = -velocity;\n      var x0 = toValue - current;\n      var zeta = c / (2 * Math.sqrt(k * m));\n      var omega0 = Math.sqrt(k / m);\n      var omega1 = omega0 * Math.sqrt(1 - Math.pow(zeta, 2));\n      var t = deltaTime / 1000;\n      var sin1 = Math.sin(omega1 * t);\n      var cos1 = Math.cos(omega1 * t);\n      var underDampedEnvelope = Math.exp(-zeta * omega0 * t);\n      var underDampedFrag1 = underDampedEnvelope * (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);\n      var underDampedPosition = toValue - underDampedFrag1;\n      var underDampedVelocity = zeta * omega0 * underDampedFrag1 - underDampedEnvelope * (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1);\n      var criticallyDampedEnvelope = Math.exp(-omega0 * t);\n      var criticallyDampedPosition = toValue - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);\n      var criticallyDampedVelocity = criticallyDampedEnvelope * (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);\n      var isOvershooting = function isOvershooting() {\n        if (config.overshootClamping && config.stiffness !== 0) {\n          return current < toValue ? animation.current > toValue : animation.current < toValue;\n        } else {\n          return false;\n        }\n      };\n      var isVelocity = Math.abs(velocity) < config.restSpeedThreshold;\n      var isDisplacement = config.stiffness === 0 || Math.abs(toValue - current) < config.restDisplacementThreshold;\n      if (zeta < 1) {\n        animation.current = underDampedPosition;\n        animation.velocity = underDampedVelocity;\n      } else {\n        animation.current = criticallyDampedPosition;\n        animation.velocity = criticallyDampedVelocity;\n      }\n      if (isOvershooting() || isVelocity && isDisplacement) {\n        if (config.stiffness !== 0) {\n          animation.velocity = 0;\n          animation.current = toValue;\n        }\n        animation.lastTimestamp = 0;\n        return true;\n      }\n      return false;\n    }\n    function onStart(animation, value, now, previousAnimation) {\n      animation.current = value;\n      if (previousAnimation) {\n        animation.velocity = previousAnimation.velocity || animation.velocity || 0;\n        animation.lastTimestamp = previousAnimation.lastTimestamp || now;\n      } else {\n        animation.lastTimestamp = now;\n      }\n    }\n    return {\n      onFrame: spring,\n      onStart: onStart,\n      toValue: toValue,\n      velocity: config.velocity || 0,\n      current: toValue,\n      callback: callback,\n      lastTimestamp: 0\n    };\n  });\n}","map":{"version":3,"mappings":"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","names":["defineAnimation","withSpring","toValue","userConfig","callback","config","damping","mass","stiffness","overshootClamping","restDisplacementThreshold","restSpeedThreshold","velocity","Object","keys","forEach","key","spring","animation","now","lastTimestamp","current","deltaTime","Math","min","c","m","k","v0","x0","zeta","sqrt","omega0","omega1","t","sin1","sin","cos1","cos","underDampedEnvelope","exp","underDampedFrag1","underDampedPosition","underDampedVelocity","criticallyDampedEnvelope","criticallyDampedPosition","criticallyDampedVelocity","isOvershooting","isVelocity","abs","isDisplacement","onStart","value","previousAnimation","onFrame"],"sources":["spring.ts"],"sourcesContent":["import { defineAnimation } from './util';\nimport {\n  Animation,\n  AnimationCallback,\n  AnimatableValue,\n  Timestamp,\n} from '../commonTypes';\n\ninterface SpringConfig {\n  mass?: number;\n  stiffness?: number;\n  overshootClamping?: boolean;\n  restDisplacementThreshold?: number;\n  restSpeedThreshold?: number;\n  velocity?: number;\n  damping?: number;\n}\n\nexport interface SpringAnimation extends Animation<SpringAnimation> {\n  current: AnimatableValue;\n  toValue: AnimatableValue;\n  velocity: number;\n  lastTimestamp: Timestamp;\n}\n\nexport interface InnerSpringAnimation\n  extends Omit<SpringAnimation, 'toValue' | 'current'> {\n  toValue: number;\n  current: number;\n}\n\nexport function withSpring(\n  toValue: AnimatableValue,\n  userConfig?: SpringConfig,\n  callback?: AnimationCallback\n): Animation<SpringAnimation> {\n  'worklet';\n\n  return defineAnimation<SpringAnimation>(toValue, () => {\n    'worklet';\n\n    // TODO: figure out why we can't use spread or Object.assign here\n    // when user config is \"frozen object\" we can't enumerate it (perhaps\n    // something is wrong with the object prototype).\n    const config: Required<SpringConfig> = {\n      damping: 10,\n      mass: 1,\n      stiffness: 100,\n      overshootClamping: false,\n      restDisplacementThreshold: 0.01,\n      restSpeedThreshold: 2,\n      velocity: 0,\n    };\n    if (userConfig) {\n      Object.keys(userConfig).forEach(\n        (key) =>\n          ((config as any)[key] = userConfig[key as keyof typeof userConfig])\n      );\n    }\n\n    function spring(animation: InnerSpringAnimation, now: Timestamp): boolean {\n      const { toValue, lastTimestamp, current, velocity } = animation;\n\n      const deltaTime = Math.min(now - lastTimestamp, 64);\n      animation.lastTimestamp = now;\n\n      const c = config.damping;\n      const m = config.mass;\n      const k = config.stiffness;\n\n      const v0 = -velocity;\n      const x0 = toValue - current;\n\n      const zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n      const omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n      const omega1 = omega0 * Math.sqrt(1 - zeta ** 2); // exponential decay\n\n      const t = deltaTime / 1000;\n\n      const sin1 = Math.sin(omega1 * t);\n      const cos1 = Math.cos(omega1 * t);\n\n      // under damped\n      const underDampedEnvelope = Math.exp(-zeta * omega0 * t);\n      const underDampedFrag1 =\n        underDampedEnvelope *\n        (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);\n\n      const underDampedPosition = toValue - underDampedFrag1;\n      // This looks crazy -- it's actually just the derivative of the oscillation function\n      const underDampedVelocity =\n        zeta * omega0 * underDampedFrag1 -\n        underDampedEnvelope *\n          (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1);\n\n      // critically damped\n      const criticallyDampedEnvelope = Math.exp(-omega0 * t);\n      const criticallyDampedPosition =\n        toValue - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);\n\n      const criticallyDampedVelocity =\n        criticallyDampedEnvelope *\n        (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);\n\n      const isOvershooting = () => {\n        if (config.overshootClamping && config.stiffness !== 0) {\n          return current < toValue\n            ? animation.current > toValue\n            : animation.current < toValue;\n        } else {\n          return false;\n        }\n      };\n\n      const isVelocity = Math.abs(velocity) < config.restSpeedThreshold;\n      const isDisplacement =\n        config.stiffness === 0 ||\n        Math.abs(toValue - current) < config.restDisplacementThreshold;\n\n      if (zeta < 1) {\n        animation.current = underDampedPosition;\n        animation.velocity = underDampedVelocity;\n      } else {\n        animation.current = criticallyDampedPosition;\n        animation.velocity = criticallyDampedVelocity;\n      }\n\n      if (isOvershooting() || (isVelocity && isDisplacement)) {\n        if (config.stiffness !== 0) {\n          animation.velocity = 0;\n          animation.current = toValue;\n        }\n        // clear lastTimestamp to avoid using stale value by the next spring animation that starts after this one\n        animation.lastTimestamp = 0;\n        return true;\n      }\n      return false;\n    }\n\n    function onStart(\n      animation: SpringAnimation,\n      value: number,\n      now: Timestamp,\n      previousAnimation: SpringAnimation\n    ): void {\n      animation.current = value;\n      if (previousAnimation) {\n        animation.velocity =\n          previousAnimation.velocity || animation.velocity || 0;\n        animation.lastTimestamp = previousAnimation.lastTimestamp || now;\n      } else {\n        animation.lastTimestamp = now;\n      }\n    }\n\n    return {\n      onFrame: spring,\n      onStart,\n      toValue,\n      velocity: config.velocity || 0,\n      current: toValue,\n      callback,\n      lastTimestamp: 0,\n    } as SpringAnimation;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}