{"ast":null,"code":"import { defineAnimation } from \"./util\";\nexport function withRepeat(_nextAnimation) {\n  'worklet';\n\n  var numberOfReps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var reverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var callback = arguments.length > 3 ? arguments[3] : undefined;\n  return defineAnimation(_nextAnimation, function () {\n    'worklet';\n\n    var nextAnimation = typeof _nextAnimation === 'function' ? _nextAnimation() : _nextAnimation;\n    function repeat(animation, now) {\n      var finished = nextAnimation.onFrame(nextAnimation, now);\n      animation.current = nextAnimation.current;\n      if (finished) {\n        animation.reps += 1;\n        if (nextAnimation.callback) {\n          nextAnimation.callback(true, animation.current);\n        }\n        if (numberOfReps > 0 && animation.reps >= numberOfReps) {\n          return true;\n        }\n        var startValue = reverse ? nextAnimation.current : animation.startValue;\n        if (reverse) {\n          nextAnimation.toValue = animation.startValue;\n          animation.startValue = startValue;\n        }\n        nextAnimation.onStart(nextAnimation, startValue, now, nextAnimation.previousAnimation);\n        return false;\n      }\n      return false;\n    }\n    var repCallback = function repCallback(finished) {\n      if (callback) {\n        callback(finished);\n      }\n      if (!finished && nextAnimation.callback) {\n        nextAnimation.callback(false);\n      }\n    };\n    function onStart(animation, value, now, previousAnimation) {\n      animation.startValue = value;\n      animation.reps = 0;\n      nextAnimation.onStart(nextAnimation, value, now, previousAnimation);\n    }\n    return {\n      isHigherOrder: true,\n      onFrame: repeat,\n      onStart: onStart,\n      reps: 0,\n      current: nextAnimation.current,\n      callback: repCallback,\n      startValue: 0\n    };\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,eAAT;AAeA,OAAO,SAASC,UAAT,CACLC,cADK,EAKuB;EAC5B;;EAD4B,IAH5BC,YAG4B,uEAHb,CAGa;EAAA,IAF5BC,OAE4B,uEAFlB,KAEkB;EAAA,IAD5BC,QAC4B;EAG5B,OAAOL,eAAe,CAAkBE,cAAlB,EAAkC,YAAM;IAC5D;;IAEA,IAAMI,aAA8B,GAClC,OAAOJ,cAAP,KAA0B,UAA1B,GAAuCA,cAAc,EAArD,GAA0DA,cAD5D;IAGA,SAASK,MAAT,CAAgBC,SAAhB,EAAiDC,GAAjD,EAA0E;MACxE,IAAMC,QAAQ,GAAGJ,aAAa,CAACK,OAAd,CAAsBL,aAAtB,EAAqCG,GAArC,CAAjB;MACAD,SAAS,CAACI,OAAV,GAAoBN,aAAa,CAACM,OAAlC;MACA,IAAIF,QAAJ,EAAc;QACZF,SAAS,CAACK,IAAV,IAAkB,CAAlB;QAGA,IAAIP,aAAa,CAACD,QAAlB,EAA4B;UAC1BC,aAAa,CAACD,QAAd,CAAuB,MAAqBG,SAAS,CAACI,OAAtD;QACD;QACD,IAAIT,YAAY,GAAG,CAAf,IAAoBK,SAAS,CAACK,IAAV,IAAkBV,YAA1C,EAAwD;UACtD,OAAO,IAAP;QACD;QAED,IAAMW,UAAU,GAAGV,OAAO,GACrBE,aAAa,CAACM,OADO,GAEtBJ,SAAS,CAACM,UAFd;QAGA,IAAIV,OAAJ,EAAa;UACXE,aAAa,CAACS,OAAd,GAAwBP,SAAS,CAACM,UAAlC;UACAN,SAAS,CAACM,UAAV,GAAuBA,UAAvB;QACD;QACDR,aAAa,CAACU,OAAd,CACEV,aADF,EAEEQ,UAFF,EAGEL,GAHF,EAIEH,aAAa,CAACW,iBAJhB;QAMA,OAAO,KAAP;MACD;MACD,OAAO,KAAP;IACD;IAED,IAAMC,WAAW,GAAIR,SAAfQ,WAAW,CAAIR,QAAD,EAA6B;MAC/C,IAAIL,QAAJ,EAAc;QACZA,QAAQ,CAACK,QAAD,CAAR;MACD;MAED,IAAI,CAACA,QAAD,IAAaJ,aAAa,CAACD,QAA/B,EAAyC;QACvCC,aAAa,CAACD,QAAd,CAAuB,MAAvB;MACD;IACF,CARD;IAUA,SAASW,OAAT,CACER,SADF,EAEEW,KAFF,EAGEV,GAHF,EAIEQ,iBAJF,EAKQ;MACNT,SAAS,CAACM,UAAV,GAAuBK,KAAvB;MACAX,SAAS,CAACK,IAAV,GAAiB,CAAjB;MACAP,aAAa,CAACU,OAAd,CAAsBV,aAAtB,EAAqCa,KAArC,EAA4CV,GAA5C,EAAiDQ,iBAAjD;IACD;IAED,OAAO;MACLG,aAAa,EAAE,IADV;MAELT,OAAO,EAAEJ,MAFJ;MAGLS,OAHK,EAGLA,OAHK;MAILH,IAAI,EAAE,CAJD;MAKLD,OAAO,EAAEN,aAAa,CAACM,OALlB;MAMLP,QAAQ,EAAEa,WANL;MAOLJ,UAAU,EAAE;IAPP,CAAP;EASD,CApEqB,CAAtB;AAqED","names":["defineAnimation","withRepeat","_nextAnimation","numberOfReps","reverse","callback","nextAnimation","repeat","animation","now","finished","onFrame","current","reps","startValue","toValue","onStart","previousAnimation","repCallback","value","isHigherOrder"],"sources":["repeat.ts"],"sourcesContent":["import { defineAnimation } from './util';\nimport {\n  Animation,\n  AnimationCallback,\n  AnimatableValue,\n  Timestamp,\n} from '../commonTypes';\nimport { NextAnimation, RepeatAnimation } from './commonTypes';\n\nexport interface InnerRepeatAnimation\n  extends Omit<RepeatAnimation, 'toValue' | 'startValue'> {\n  toValue: number;\n  startValue: number;\n}\n\nexport function withRepeat(\n  _nextAnimation: NextAnimation<RepeatAnimation>,\n  numberOfReps = 2,\n  reverse = false,\n  callback?: AnimationCallback\n): Animation<RepeatAnimation> {\n  'worklet';\n\n  return defineAnimation<RepeatAnimation>(_nextAnimation, () => {\n    'worklet';\n\n    const nextAnimation: RepeatAnimation =\n      typeof _nextAnimation === 'function' ? _nextAnimation() : _nextAnimation;\n\n    function repeat(animation: InnerRepeatAnimation, now: Timestamp): boolean {\n      const finished = nextAnimation.onFrame(nextAnimation, now);\n      animation.current = nextAnimation.current;\n      if (finished) {\n        animation.reps += 1;\n        // call inner animation's callback on every repetition\n        // as the second argument the animation's current value is passed\n        if (nextAnimation.callback) {\n          nextAnimation.callback(true /* finished */, animation.current);\n        }\n        if (numberOfReps > 0 && animation.reps >= numberOfReps) {\n          return true;\n        }\n\n        const startValue = reverse\n          ? (nextAnimation.current as number)\n          : animation.startValue;\n        if (reverse) {\n          nextAnimation.toValue = animation.startValue;\n          animation.startValue = startValue;\n        }\n        nextAnimation.onStart(\n          nextAnimation,\n          startValue,\n          now,\n          nextAnimation.previousAnimation as RepeatAnimation\n        );\n        return false;\n      }\n      return false;\n    }\n\n    const repCallback = (finished: boolean): void => {\n      if (callback) {\n        callback(finished);\n      }\n      // when cancelled call inner animation's callback\n      if (!finished && nextAnimation.callback) {\n        nextAnimation.callback(false /* finished */);\n      }\n    };\n\n    function onStart(\n      animation: RepeatAnimation,\n      value: AnimatableValue,\n      now: Timestamp,\n      previousAnimation: RepeatAnimation\n    ): void {\n      animation.startValue = value;\n      animation.reps = 0;\n      nextAnimation.onStart(nextAnimation, value, now, previousAnimation);\n    }\n\n    return {\n      isHigherOrder: true,\n      onFrame: repeat,\n      onStart,\n      reps: 0,\n      current: nextAnimation.current,\n      callback: repCallback,\n      startValue: 0,\n    } as RepeatAnimation;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}