{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { withTiming } from \"../../animation\";\nvar supportedProps = ['width', 'height', 'originX', 'originY', 'transform'];\nexport var SharedTransition = function () {\n  function SharedTransition() {\n    _classCallCheck(this, SharedTransition);\n    _defineProperty(this, \"animationFactory\", null);\n    _defineProperty(this, \"defaultDuration\", 500);\n  }\n  _createClass(SharedTransition, [{\n    key: \"custom\",\n    value: function custom(animationFactory) {\n      this.animationFactory = animationFactory;\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var animationFactory = this.animationFactory;\n      var animationDuration = this.defaultDuration;\n      return function (values) {\n        'worklet';\n\n        var animations = {};\n        var initialValues = {};\n        if (animationFactory) {\n          animations = animationFactory(values);\n          for (var key in animations) {\n            if (!supportedProps.includes(key)) {\n              throw Error(\"The prop '\" + key + \"' is not supported yet.\");\n            }\n          }\n        } else {\n          for (var propName of supportedProps) {\n            if (propName === 'transform') {\n              var matrix = values.targetTransformMatrix;\n              animations.transformMatrix = withTiming(matrix, {\n                duration: animationDuration\n              });\n            } else {\n              var keyToTargetValue = 'target' + propName.charAt(0).toUpperCase() + propName.slice(1);\n              animations[propName] = withTiming(values[keyToTargetValue], {\n                duration: animationDuration\n              });\n            }\n          }\n        }\n        for (var _propName in animations) {\n          if (_propName === 'transform') {\n            initialValues.transformMatrix = values.currentTransformMatrix;\n          } else {\n            var keyToCurrentValue = 'current' + _propName.charAt(0).toUpperCase() + _propName.slice(1);\n            initialValues[_propName] = values[keyToCurrentValue];\n          }\n        }\n        return {\n          initialValues: initialValues,\n          animations: animations\n        };\n      };\n    }\n  }], [{\n    key: \"createInstance\",\n    value: function createInstance() {\n      return new SharedTransition();\n    }\n  }, {\n    key: \"custom\",\n    value: function custom(animationFactory) {\n      return this.createInstance().custom(animationFactory);\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      return this.createInstance().build();\n    }\n  }]);\n  return SharedTransition;\n}();\nexport var DefaultSharedTransition = SharedTransition;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,UAAT;AAQA,IAAMC,cAAc,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,SAA/B,EAA0C,WAA1C,CAAvB;AAIA,WAAaC,gBAAN;EAA0D;IAAA;IAAAC,0CACf,IADe;IAAAA,yCAE7C,GAF6C;EAAA;EAAA;IAAA;IAAA,OAY/DC,gBAAOC,gBAAD,EAA2D;MAC/D,KAAKA,gBAAL,GAAwBA,gBAAxB;MACA,OAAO,IAAP;IACD;EAAA;IAAA;IAAA,OAMDC,iBAAiC;MAC/B,IAAMD,gBAAgB,GAAG,KAAKA,gBAA9B;MACA,IAAME,iBAAiB,GAAG,KAAKC,eAA/B;MACA,OAAQC,gBAAD,EAAoC;QACzC;;QACA,IAAIC,UAEH,GAAG,EAFJ;QAGA,IAAMC,aAEL,GAAG,EAFJ;QAIA,IAAIN,gBAAJ,EAAsB;UACpBK,UAAU,GAAGL,gBAAgB,CAACI,MAAD,CAA7B;UACA,KAAK,IAAMG,GAAX,IAAkBF,UAAlB,EAA8B;YAC5B,IAAI,CAACT,cAAc,CAACY,QAAf,CAAwBD,GAAxB,CAAL,EAAmC;cACjC,MAAME,KAAK,gBAAcF,GAAI,6BAA7B;YACD;UACF;QACF,CAPD,MAOO;UACL,KAAK,IAAMG,QAAX,IAAuBd,cAAvB,EAAuC;YACrC,IAAIc,QAAQ,KAAK,WAAjB,EAA8B;cAC5B,IAAMC,MAAM,GAAGP,MAAM,CAACQ,qBAAtB;cACAP,UAAU,CAACQ,eAAX,GAA6BlB,UAAU,CAACgB,MAAD,EAAS;gBAE9CG,QAAQ,EAAEZ;cAFoC,CAAT,CAAvC;YAID,CAND,MAMO;cACL,IAAMa,gBAAgB,GACpB,WAAWL,QAAQ,CAACM,MAAT,CAAgB,CAAhB,EAAmBC,WAAnB,EAAX,GAA8CP,QAAQ,CAACQ,KAAT,CAAe,CAAf,CADhD;cAEAb,UAAU,CAACK,QAAD,CAAV,GAAuBf,UAAU,CAACS,MAAM,CAACW,gBAAD,CAAP,EAA2B;gBAE1DD,QAAQ,EAAEZ;cAFgD,CAA3B,CAAjC;YAID;UACF;QACF;QAED,KAAK,IAAMQ,SAAX,IAAuBL,UAAvB,EAAmC;UACjC,IAAIK,SAAQ,KAAK,WAAjB,EAA8B;YAC5BJ,aAAa,CAACO,eAAd,GAAgCT,MAAM,CAACe,sBAAvC;UACD,CAFD,MAEO;YACL,IAAMC,iBAAiB,GACrB,YAAYV,SAAQ,CAACM,MAAT,CAAgB,CAAhB,EAAmBC,WAAnB,EAAZ,GAA+CP,SAAQ,CAACQ,KAAT,CAAe,CAAf,CADjD;YAEAZ,aAAa,CAACI,SAAD,CAAb,GAA0BN,MAAM,CAACgB,iBAAD,CAAhC;UACD;QACF;QAED,OAAO;UAAEd,aAAF,EAAEA,aAAF;UAAiBD;QAAjB,CAAP;MACD,CA9CD;IA+CD;EAAA;IAAA;IAAA,OAnEoB,0BAAqB;MACxC,OAAO,IAAIR,gBAAJ,EAAP;IACD;EAAA;IAAA;IAAA,OAEY,gBAACG,gBAAD,EAA2D;MACtE,OAAO,KAAKqB,cAAL,GAAsBtB,MAAtB,CAA6BC,gBAA7B,CAAP;IACD;EAAA;IAAA;IAAA,OAOW,iBAA4B;MACtC,OAAO,KAAKqB,cAAL,GAAsBpB,KAAtB,EAAP;IACD;EAAA;EAAA;AAAA;AAuDH,OAAO,IAAMqB,uBAAuB,GAAGzB,gBAAhC","names":["withTiming","supportedProps","SharedTransition","_defineProperty","custom","animationFactory","build","animationDuration","defaultDuration","values","animations","initialValues","key","includes","Error","propName","matrix","targetTransformMatrix","transformMatrix","duration","keyToTargetValue","charAt","toUpperCase","slice","currentTransformMatrix","keyToCurrentValue","createInstance","DefaultSharedTransition"],"sources":["index.ts"],"sourcesContent":["import { withTiming } from '../../animation';\nimport {\n  ILayoutAnimationBuilder,\n  LayoutAnimationFunction,\n  LayoutAnimationsValues,\n} from '../animationBuilder/commonTypes';\nimport { StyleProps } from '../../commonTypes';\n\nconst supportedProps = ['width', 'height', 'originX', 'originY', 'transform'];\n\ntype AnimationFactoryType = (values: LayoutAnimationsValues) => StyleProps;\n\nexport class SharedTransition implements ILayoutAnimationBuilder {\n  animationFactory: AnimationFactoryType | null = null;\n  defaultDuration = 500;\n\n  static createInstance(): SharedTransition {\n    return new SharedTransition();\n  }\n\n  static custom(animationFactory: AnimationFactoryType): SharedTransition {\n    return this.createInstance().custom(animationFactory);\n  }\n\n  custom(animationFactory: AnimationFactoryType): SharedTransition {\n    this.animationFactory = animationFactory;\n    return this;\n  }\n\n  static build(): LayoutAnimationFunction {\n    return this.createInstance().build();\n  }\n\n  build(): LayoutAnimationFunction {\n    const animationFactory = this.animationFactory;\n    const animationDuration = this.defaultDuration;\n    return (values: LayoutAnimationsValues) => {\n      'worklet';\n      let animations: {\n        [key: string]: any;\n      } = {};\n      const initialValues: {\n        [key: string]: any;\n      } = {};\n\n      if (animationFactory) {\n        animations = animationFactory(values);\n        for (const key in animations) {\n          if (!supportedProps.includes(key)) {\n            throw Error(`The prop '${key}' is not supported yet.`);\n          }\n        }\n      } else {\n        for (const propName of supportedProps) {\n          if (propName === 'transform') {\n            const matrix = values.targetTransformMatrix;\n            animations.transformMatrix = withTiming(matrix, {\n              // native screen transition takes around 500ms\n              duration: animationDuration,\n            });\n          } else {\n            const keyToTargetValue =\n              'target' + propName.charAt(0).toUpperCase() + propName.slice(1);\n            animations[propName] = withTiming(values[keyToTargetValue], {\n              // native screen transition takes around 500ms\n              duration: animationDuration,\n            });\n          }\n        }\n      }\n\n      for (const propName in animations) {\n        if (propName === 'transform') {\n          initialValues.transformMatrix = values.currentTransformMatrix;\n        } else {\n          const keyToCurrentValue =\n            'current' + propName.charAt(0).toUpperCase() + propName.slice(1);\n          initialValues[propName] = values[keyToCurrentValue];\n        }\n      }\n\n      return { initialValues, animations };\n    };\n  }\n}\n\nexport const DefaultSharedTransition = SharedTransition;\n"]},"metadata":{},"sourceType":"module"}