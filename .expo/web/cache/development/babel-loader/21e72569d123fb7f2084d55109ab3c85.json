{"ast":null,"code":"import { defineAnimation } from \"./util\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function withDecay(userConfig, callback) {\n  'worklet';\n\n  return defineAnimation(0, function () {\n    'worklet';\n\n    var _config$velocity;\n    var config = {\n      deceleration: 0.998,\n      velocityFactor: Platform.OS !== 'web' ? 1 : 1000,\n      velocity: 0,\n      rubberBandFactor: 0.6\n    };\n    if (userConfig) {\n      Object.keys(userConfig).forEach(function (key) {\n        return config[key] = userConfig[key];\n      });\n    }\n    var VELOCITY_EPS = Platform.OS !== 'web' ? 1 : 1 / 20;\n    var SLOPE_FACTOR = 0.1;\n    var decay;\n    if (config.rubberBandEffect) {\n      decay = function decay(animation, now) {\n        var lastTimestamp = animation.lastTimestamp,\n          startTimestamp = animation.startTimestamp,\n          current = animation.current,\n          initialVelocity = animation.initialVelocity,\n          velocity = animation.velocity;\n        var deltaTime = Math.min(now - lastTimestamp, 64);\n        var clampIndex = initialVelocity > 0 ? 1 : 0;\n        var derivative = 0;\n        if (current < config.clamp[0] || current > config.clamp[1]) {\n          derivative = current - config.clamp[clampIndex];\n        }\n        if (derivative !== 0) {\n          animation.springActive = true;\n        } else if (derivative === 0 && animation.springActive) {\n          animation.current = config.clamp[clampIndex];\n          return true;\n        }\n        var v = velocity * Math.exp(-(1 - config.deceleration) * (now - startTimestamp) * SLOPE_FACTOR) - derivative * config.rubberBandFactor;\n        animation.current = current + v * config.velocityFactor * deltaTime / 1000;\n        animation.velocity = v;\n        animation.lastTimestamp = now;\n        return false;\n      };\n    } else {\n      decay = function decay(animation, now) {\n        var lastTimestamp = animation.lastTimestamp,\n          startTimestamp = animation.startTimestamp,\n          initialVelocity = animation.initialVelocity,\n          current = animation.current,\n          velocity = animation.velocity;\n        var deltaTime = Math.min(now - lastTimestamp, 64);\n        var v = velocity * Math.exp(-(1 - config.deceleration) * (now - startTimestamp) * SLOPE_FACTOR);\n        animation.current = current + v * config.velocityFactor * deltaTime / 1000;\n        animation.velocity = v;\n        animation.lastTimestamp = now;\n        if (config.clamp) {\n          if (initialVelocity < 0 && animation.current <= config.clamp[0]) {\n            animation.current = config.clamp[0];\n            return true;\n          } else if (initialVelocity > 0 && animation.current >= config.clamp[1]) {\n            animation.current = config.clamp[1];\n            return true;\n          }\n        }\n        return Math.abs(v) < VELOCITY_EPS;\n      };\n    }\n    function validateConfig() {\n      if (config.clamp) {\n        if (!Array.isArray(config.clamp)) {\n          throw Error(\"config.clamp must be an array but is \" + typeof config.clamp);\n        }\n        if (config.clamp.length !== 2) {\n          throw Error(\"clamp array must contain 2 items but is given \" + config.clamp.length);\n        }\n      }\n      if (config.velocityFactor <= 0) {\n        throw Error(\"config.velocityFactor must be greather then 0 but is \" + config.velocityFactor);\n      }\n      if (config.rubberBandEffect && !config.clamp) {\n        throw Error('You need to set `clamp` property when using `rubberBandEffect`.');\n      }\n    }\n    function onStart(animation, value, now) {\n      animation.current = value;\n      animation.lastTimestamp = now;\n      animation.startTimestamp = now;\n      animation.initialVelocity = config.velocity;\n      validateConfig();\n    }\n    return {\n      onFrame: decay,\n      onStart: onStart,\n      callback: callback,\n      velocity: (_config$velocity = config.velocity) != null ? _config$velocity : 0,\n      initialVelocity: 0,\n      current: 0,\n      lastTimestamp: 0,\n      startTimestamp: 0\n    };\n  });\n}","map":{"version":3,"mappings":"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","names":["defineAnimation","withDecay","userConfig","callback","config","deceleration","velocityFactor","Platform","OS","velocity","rubberBandFactor","Object","keys","forEach","key","VELOCITY_EPS","SLOPE_FACTOR","decay","rubberBandEffect","animation","now","lastTimestamp","startTimestamp","current","initialVelocity","deltaTime","Math","min","clampIndex","derivative","clamp","springActive","v","exp","abs","validateConfig","Array","isArray","Error","length","onStart","value","onFrame"],"sources":["decay.ts"],"sourcesContent":["import { defineAnimation } from './util';\nimport {\n  Animation,\n  AnimationCallback,\n  AnimationObject,\n  AnimatableValue,\n  Timestamp,\n} from '../commonTypes';\nimport { Platform } from 'react-native';\n\ninterface DecayConfig {\n  deceleration?: number;\n  velocityFactor?: number;\n  clamp?: number[];\n  velocity?: number;\n}\n\ninterface DefaultDecayConfig {\n  deceleration: number;\n  velocityFactor: number;\n  clamp?: number[];\n  velocity: number;\n  rubberBandEffect?: boolean;\n  rubberBandFactor: number;\n}\n\nexport interface DecayAnimation extends Animation<DecayAnimation> {\n  lastTimestamp: Timestamp;\n  startTimestamp: Timestamp;\n  initialVelocity: number;\n  velocity: number;\n  current: AnimatableValue;\n}\n\nexport interface InnerDecayAnimation\n  extends Omit<DecayAnimation, 'current'>,\n    AnimationObject {\n  current: number;\n}\n\nexport function withDecay(\n  userConfig: DecayConfig,\n  callback?: AnimationCallback\n): Animation<DecayAnimation> {\n  'worklet';\n\n  return defineAnimation<DecayAnimation>(0, () => {\n    'worklet';\n    const config: DefaultDecayConfig = {\n      deceleration: 0.998,\n      velocityFactor: Platform.OS !== 'web' ? 1 : 1000,\n      velocity: 0,\n      rubberBandFactor: 0.6,\n    };\n    if (userConfig) {\n      Object.keys(userConfig).forEach(\n        (key) =>\n          ((config as any)[key] = userConfig[key as keyof typeof userConfig])\n      );\n    }\n\n    const VELOCITY_EPS = Platform.OS !== 'web' ? 1 : 1 / 20;\n    const SLOPE_FACTOR = 0.1;\n\n    let decay: (animation: InnerDecayAnimation, now: number) => boolean;\n\n    if (config.rubberBandEffect) {\n      decay = (animation: InnerDecayAnimation, now: number): boolean => {\n        const {\n          lastTimestamp,\n          startTimestamp,\n          current,\n          initialVelocity,\n          velocity,\n        } = animation;\n\n        const deltaTime = Math.min(now - lastTimestamp, 64);\n        const clampIndex = initialVelocity > 0 ? 1 : 0;\n        let derivative = 0;\n        if (current < config.clamp![0] || current > config.clamp![1]) {\n          derivative = current - config.clamp![clampIndex];\n        }\n\n        if (derivative !== 0) {\n          animation.springActive = true;\n        } else if (derivative === 0 && animation.springActive) {\n          animation.current = config.clamp![clampIndex];\n          return true;\n        }\n\n        const v =\n          velocity *\n            Math.exp(\n              -(1 - config.deceleration) * (now - startTimestamp) * SLOPE_FACTOR\n            ) -\n          derivative * config.rubberBandFactor;\n\n        animation.current =\n          current + (v * config.velocityFactor * deltaTime) / 1000;\n        animation.velocity = v;\n        animation.lastTimestamp = now;\n        return false;\n      };\n    } else {\n      decay = (animation: InnerDecayAnimation, now: number): boolean => {\n        const {\n          lastTimestamp,\n          startTimestamp,\n          initialVelocity,\n          current,\n          velocity,\n        } = animation;\n\n        const deltaTime = Math.min(now - lastTimestamp, 64);\n        const v =\n          velocity *\n          Math.exp(\n            -(1 - config.deceleration) * (now - startTimestamp) * SLOPE_FACTOR\n          );\n        animation.current =\n          current + (v * config.velocityFactor * deltaTime) / 1000;\n        animation.velocity = v;\n        animation.lastTimestamp = now;\n\n        if (config.clamp) {\n          if (initialVelocity < 0 && animation.current <= config.clamp[0]) {\n            animation.current = config.clamp[0];\n            return true;\n          } else if (\n            initialVelocity > 0 &&\n            animation.current >= config.clamp[1]\n          ) {\n            animation.current = config.clamp[1];\n            return true;\n          }\n        }\n\n        return Math.abs(v) < VELOCITY_EPS;\n      };\n    }\n\n    function validateConfig(): void {\n      if (config.clamp) {\n        if (!Array.isArray(config.clamp)) {\n          throw Error(\n            `config.clamp must be an array but is ${typeof config.clamp}`\n          );\n        }\n        if (config.clamp.length !== 2) {\n          throw Error(\n            `clamp array must contain 2 items but is given ${config.clamp.length}`\n          );\n        }\n      }\n      if (config.velocityFactor <= 0) {\n        throw Error(\n          `config.velocityFactor must be greather then 0 but is ${config.velocityFactor}`\n        );\n      }\n      if (config.rubberBandEffect && !config.clamp) {\n        throw Error(\n          'You need to set `clamp` property when using `rubberBandEffect`.'\n        );\n      }\n    }\n\n    function onStart(\n      animation: DecayAnimation,\n      value: number,\n      now: Timestamp\n    ): void {\n      animation.current = value;\n      animation.lastTimestamp = now;\n      animation.startTimestamp = now;\n      animation.initialVelocity = config.velocity;\n      validateConfig();\n    }\n\n    return {\n      onFrame: decay,\n      onStart,\n      callback,\n      velocity: config.velocity ?? 0,\n      initialVelocity: 0,\n      current: 0,\n      lastTimestamp: 0,\n      startTimestamp: 0,\n    } as DecayAnimation;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}