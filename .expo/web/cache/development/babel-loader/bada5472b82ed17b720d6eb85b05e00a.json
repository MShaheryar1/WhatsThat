{"ast":null,"code":"import { useRef } from 'react';\nimport { makeMutable } from \"./core\";\nexport function makeViewDescriptorsSet() {\n  var sharableViewDescriptors = makeMutable([]);\n  var data = {\n    sharableViewDescriptors: sharableViewDescriptors,\n    add: function add(item) {\n      sharableViewDescriptors.modify(function (descriptors) {\n        'worklet';\n\n        var index = descriptors.findIndex(function (descriptor) {\n          return descriptor.tag === item.tag;\n        });\n        if (index !== -1) {\n          descriptors[index] = item;\n        } else {\n          descriptors.push(item);\n        }\n        return descriptors;\n      });\n    },\n    remove: function remove(viewTag) {\n      sharableViewDescriptors.modify(function (descriptors) {\n        'worklet';\n\n        var index = descriptors.findIndex(function (descriptor) {\n          return descriptor.tag === viewTag;\n        });\n        if (index !== -1) {\n          descriptors.splice(index, 1);\n        }\n        return descriptors;\n      });\n    }\n  };\n  return data;\n}\nexport function makeViewsRefSet() {\n  var ref = useRef(null);\n  if (ref.current === null) {\n    var data = {\n      items: new Set(),\n      add: function add(item) {\n        if (data.items.has(item)) return;\n        data.items.add(item);\n      },\n      remove: function remove(item) {\n        data.items.delete(item);\n      }\n    };\n    ref.current = data;\n  }\n  return ref.current;\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,WAAT;AAgBA,OAAO,SAASC,sBAAT,GAAsD;EAC3D,IAAMC,uBAAuB,GAAGF,WAAW,CAAe,EAAf,CAA3C;EACA,IAAMG,IAAwB,GAAG;IAC/BD,uBAD+B,EAC/BA,uBAD+B;IAE/BE,GAAG,EAAGC,iBAAD,EAAsB;MACzBH,uBAAuB,CAACI,MAAxB,CAAgCC,qBAAD,EAA+B;QAC5D;;QACA,IAAMC,KAAK,GAAGD,WAAW,CAACE,SAAZ,CACXC,oBAAD;UAAA,OAAgBA,UAAU,CAACC,GAAX,KAAmBN,IAAI,CAACM,GAD5B;QAAA,EAAd;QAGA,IAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;UAChBD,WAAW,CAACC,KAAD,CAAX,GAAqBH,IAArB;QACD,CAFD,MAEO;UACLE,WAAW,CAACK,IAAZ,CAAiBP,IAAjB;QACD;QACD,OAAOE,WAAP;MACD,CAXD;IAYD,CAf8B;IAiB/BM,MAAM,EAAGC,uBAAD,EAAqB;MAC3BZ,uBAAuB,CAACI,MAAxB,CAAgCC,qBAAD,EAA+B;QAC5D;;QACA,IAAMC,KAAK,GAAGD,WAAW,CAACE,SAAZ,CACXC,oBAAD;UAAA,OAAgBA,UAAU,CAACC,GAAX,KAAmBG,OADvB;QAAA,EAAd;QAGA,IAAIN,KAAK,KAAK,CAAC,CAAf,EAAkB;UAChBD,WAAW,CAACQ,MAAZ,CAAmBP,KAAnB,EAA0B,CAA1B;QACD;QACD,OAAOD,WAAP;MACD,CATD;IAUD;EA5B8B,CAAjC;EA8BA,OAAOJ,IAAP;AACD;AAED,OAAO,SAASa,eAAT,GAA6C;EAClD,IAAMC,GAAG,GAAGlB,MAAM,CAAuB,IAAvB,CAAlB;EACA,IAAIkB,GAAG,CAACC,OAAJ,KAAgB,IAApB,EAA0B;IACxB,IAAMf,IAAmB,GAAG;MAC1BgB,KAAK,EAAE,IAAIC,GAAJ,EADmB;MAG1BhB,GAAG,EAAGC,iBAAD,EAAa;QAChB,IAAIF,IAAI,CAACgB,KAAL,CAAWE,GAAX,CAAehB,IAAf,CAAJ,EAA0B;QAC1BF,IAAI,CAACgB,KAAL,CAAWf,GAAX,CAAeC,IAAf;MACD,CANyB;MAQ1BQ,MAAM,EAAGR,oBAAD,EAAa;QACnBF,IAAI,CAACgB,KAAL,CAAWG,MAAX,CAAkBjB,IAAlB;MACD;IAVyB,CAA5B;IAYAY,GAAG,CAACC,OAAJ,GAAcf,IAAd;EACD;EAED,OAAOc,GAAG,CAACC,OAAX;AACD","names":["useRef","makeMutable","makeViewDescriptorsSet","sharableViewDescriptors","data","add","item","modify","descriptors","index","findIndex","descriptor","tag","push","remove","viewTag","splice","makeViewsRefSet","ref","current","items","Set","has","delete"],"sources":["ViewDescriptorsSet.ts"],"sourcesContent":["import { useRef } from 'react';\nimport { makeMutable } from './core';\nimport { SharedValue } from './commonTypes';\nimport { Descriptor } from './hook/commonTypes';\n\nexport interface ViewRefSet<T> {\n  items: Set<T>;\n  add: (item: T) => void;\n  remove: (item: T) => void;\n}\n\nexport interface ViewDescriptorsSet {\n  sharableViewDescriptors: SharedValue<Descriptor[]>;\n  add: (item: Descriptor) => void;\n  remove: (viewTag: number) => void;\n}\n\nexport function makeViewDescriptorsSet(): ViewDescriptorsSet {\n  const sharableViewDescriptors = makeMutable<Descriptor[]>([]);\n  const data: ViewDescriptorsSet = {\n    sharableViewDescriptors,\n    add: (item: Descriptor) => {\n      sharableViewDescriptors.modify((descriptors: Descriptor[]) => {\n        'worklet';\n        const index = descriptors.findIndex(\n          (descriptor) => descriptor.tag === item.tag\n        );\n        if (index !== -1) {\n          descriptors[index] = item;\n        } else {\n          descriptors.push(item);\n        }\n        return descriptors;\n      });\n    },\n\n    remove: (viewTag: number) => {\n      sharableViewDescriptors.modify((descriptors: Descriptor[]) => {\n        'worklet';\n        const index = descriptors.findIndex(\n          (descriptor) => descriptor.tag === viewTag\n        );\n        if (index !== -1) {\n          descriptors.splice(index, 1);\n        }\n        return descriptors;\n      });\n    },\n  };\n  return data;\n}\n\nexport function makeViewsRefSet<T>(): ViewRefSet<T> {\n  const ref = useRef<ViewRefSet<T> | null>(null);\n  if (ref.current === null) {\n    const data: ViewRefSet<T> = {\n      items: new Set(),\n\n      add: (item: T) => {\n        if (data.items.has(item)) return;\n        data.items.add(item);\n      },\n\n      remove: (item: T) => {\n        data.items.delete(item);\n      },\n    };\n    ref.current = data;\n  }\n\n  return ref.current;\n}\n"]},"metadata":{},"sourceType":"module"}