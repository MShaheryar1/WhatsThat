{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { processColor } from \"./Colors\";\nimport { makeShareable, isConfigured } from \"./core\";\nimport { _updatePropsJS } from \"./js-reanimated\";\nimport { shouldBeUseWeb } from \"./PlatformChecker\";\nexport var colorProps = ['backgroundColor', 'borderBottomColor', 'borderColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderStartColor', 'borderEndColor', 'color', 'shadowColor', 'textDecorationColor', 'tintColor', 'textShadowColor', 'overlayColor'];\nexport var ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\nvar updatePropsByPlatform;\nif (shouldBeUseWeb()) {\n  updatePropsByPlatform = function updatePropsByPlatform(_, updates, maybeViewRef) {\n    'worklet';\n\n    if (maybeViewRef) {\n      maybeViewRef.items.forEach(function (item, _) {\n        _updatePropsJS(updates, item);\n      });\n    }\n  };\n} else {\n  if (global._IS_FABRIC) {\n    updatePropsByPlatform = function updatePropsByPlatform(viewDescriptors, updates, _) {\n      'worklet';\n\n      for (var key in updates) {\n        if (ColorProperties.indexOf(key) !== -1) {\n          updates[key] = processColor(updates[key]);\n        }\n      }\n      viewDescriptors.value.forEach(function (viewDescriptor) {\n        _updatePropsFabric(viewDescriptor.shadowNodeWrapper, updates);\n      });\n    };\n  } else {\n    updatePropsByPlatform = function updatePropsByPlatform(viewDescriptors, updates, _) {\n      'worklet';\n\n      for (var key in updates) {\n        if (ColorProperties.indexOf(key) !== -1) {\n          updates[key] = processColor(updates[key]);\n        }\n      }\n      viewDescriptors.value.forEach(function (viewDescriptor) {\n        _updatePropsPaper(viewDescriptor.tag, viewDescriptor.name || 'RCTView', updates);\n      });\n    };\n  }\n}\nexport var updateProps = updatePropsByPlatform;\nexport var updatePropsJestWrapper = function updatePropsJestWrapper(viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) {\n  adapters.forEach(function (adapter) {\n    adapter(updates);\n  });\n  animatedStyle.current.value = _objectSpread(_objectSpread({}, animatedStyle.current.value), updates);\n  updateProps(viewDescriptors, updates, maybeViewRef);\n};\nexport default updateProps;","map":{"version":3,"mappings":";;;AAEA,SAASA,YAAT;AAEA,SAASC,aAAT,EAAwBC,YAAxB;AAEA,SAASC,cAAT;AACA,SAASC,cAAT;AAIA,OAAO,IAAMC,UAAU,GAAG,CACxB,iBADwB,EAExB,mBAFwB,EAGxB,aAHwB,EAIxB,iBAJwB,EAKxB,kBALwB,EAMxB,gBANwB,EAOxB,kBAPwB,EAQxB,gBARwB,EASxB,OATwB,EAUxB,aAVwB,EAWxB,qBAXwB,EAYxB,WAZwB,EAaxB,iBAbwB,EAcxB,cAdwB,CAAnB;AAiBP,OAAO,IAAMC,eAAe,GAAG,CAACJ,YAAY,EAAb,GAAkB,EAAlB,GAAuBD,aAAa,CAACI,UAAD,CAA5D;AAEP,IAAIE,qBAAJ;AACA,IAAIH,cAAc,EAAlB,EAAsB;EACpBG,qBAAqB,GAAG,+BACtBC,CADsB,EAEtBC,OAFsB,EAGtBC,YAHsB,EAIb;IACT;;IACA,IAAIA,YAAJ,EAAkB;MAChBA,YAAY,CAACC,KAAb,CAAmBC,OAAnB,CAA2B,UAACC,IAAD,EAAOL,CAAP,EAAa;QACtCL,cAAc,CAACM,OAAD,EAAUI,IAAV,CAAd;MACD,CAFD;IAGD;EACF,CAXD;AAYD,CAbD,MAaO;EACL,IAAIC,MAAM,CAACC,UAAX,EAAuB;IACrBR,qBAAqB,GAAG,+BACtBS,eADsB,EAEtBP,OAFsB,EAGtBD,CAHsB,EAIb;MACT;;MAEA,KAAK,IAAMS,GAAX,IAAkBR,OAAlB,EAA2B;QACzB,IAAIH,eAAe,CAACY,OAAhB,CAAwBD,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;UACvCR,OAAO,CAACQ,GAAD,CAAP,GAAejB,YAAY,CAACS,OAAO,CAACQ,GAAD,CAAR,CAA3B;QACD;MACF;MAEDD,eAAe,CAACG,KAAhB,CAAsBP,OAAtB,CAA+BQ,wBAAD,EAAoB;QAChDC,kBAAkB,CAACD,cAAc,CAACE,iBAAhB,EAAmCb,OAAnC,CAAlB;MACD,CAFD;IAGD,CAhBD;EAiBD,CAlBD,MAkBO;IACLF,qBAAqB,GAAG,+BACtBS,eADsB,EAEtBP,OAFsB,EAGtBD,CAHsB,EAIb;MACT;;MAEA,KAAK,IAAMS,GAAX,IAAkBR,OAAlB,EAA2B;QACzB,IAAIH,eAAe,CAACY,OAAhB,CAAwBD,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;UACvCR,OAAO,CAACQ,GAAD,CAAP,GAAejB,YAAY,CAACS,OAAO,CAACQ,GAAD,CAAR,CAA3B;QACD;MACF;MACDD,eAAe,CAACG,KAAhB,CAAsBP,OAAtB,CAA+BQ,wBAAD,EAAoB;QAChDG,iBAAiB,CACfH,cAAc,CAACI,GADA,EAEfJ,cAAc,CAACK,IAAf,IAAuB,SAFR,EAGfhB,OAHe,CAAjB;MAKD,CAND;IAOD,CAnBD;EAoBD;AACF;AAED,OAAO,IAAMiB,WAIJ,GAAGnB,qBAJL;AAMP,OAAO,IAAMoB,sBAAsB,GAAG,SAAzBA,sBAAsB,CACjCX,eADoC,EAEpCP,OAFoC,EAGpCC,YAHoC,EAIpCkB,aAJoC,EAKpCC,QALoC,EAM3B;EACTA,QAAQ,CAACjB,OAAT,CAAkBkB,iBAAD,EAAa;IAC5BA,OAAO,CAACrB,OAAD,CAAP;EACD,CAFD;EAGAmB,aAAa,CAACG,OAAd,CAAsBZ,KAAtB,mCACKS,aAAa,CAACG,OAAd,CAAsBZ,KADG,GAEzBV,QAFL;EAKAiB,WAAW,CAACV,eAAD,EAAkBP,OAAlB,EAA2BC,YAA3B,CAAX;AACD,CAhBM;AAkBP,eAAegB,WAAf","names":["processColor","makeShareable","isConfigured","_updatePropsJS","shouldBeUseWeb","colorProps","ColorProperties","updatePropsByPlatform","_","updates","maybeViewRef","items","forEach","item","global","_IS_FABRIC","viewDescriptors","key","indexOf","value","viewDescriptor","_updatePropsFabric","shadowNodeWrapper","_updatePropsPaper","tag","name","updateProps","updatePropsJestWrapper","animatedStyle","adapters","adapter","current"],"sources":["UpdateProps.ts"],"sourcesContent":["/* global _updatePropsPaper _updatePropsFabric */\nimport { MutableRefObject } from 'react';\nimport { processColor } from './Colors';\nimport { AnimatedStyle, SharedValue, StyleProps } from './commonTypes';\nimport { makeShareable, isConfigured } from './core';\nimport { Descriptor } from './hook/commonTypes';\nimport { _updatePropsJS } from './js-reanimated';\nimport { shouldBeUseWeb } from './PlatformChecker';\nimport { ViewRefSet } from './ViewDescriptorsSet';\n\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nexport const colorProps = [\n  'backgroundColor',\n  'borderBottomColor',\n  'borderColor',\n  'borderLeftColor',\n  'borderRightColor',\n  'borderTopColor',\n  'borderStartColor',\n  'borderEndColor',\n  'color',\n  'shadowColor',\n  'textDecorationColor',\n  'tintColor',\n  'textShadowColor',\n  'overlayColor',\n];\n\nexport const ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\n\nlet updatePropsByPlatform;\nif (shouldBeUseWeb()) {\n  updatePropsByPlatform = (\n    _: SharedValue<Descriptor[]>,\n    updates: StyleProps | AnimatedStyle,\n    maybeViewRef: ViewRefSet<any> | undefined\n  ): void => {\n    'worklet';\n    if (maybeViewRef) {\n      maybeViewRef.items.forEach((item, _) => {\n        _updatePropsJS(updates, item);\n      });\n    }\n  };\n} else {\n  if (global._IS_FABRIC) {\n    updatePropsByPlatform = (\n      viewDescriptors: SharedValue<Descriptor[]>,\n      updates: StyleProps | AnimatedStyle,\n      _: ViewRefSet<any> | undefined\n    ): void => {\n      'worklet';\n\n      for (const key in updates) {\n        if (ColorProperties.indexOf(key) !== -1) {\n          updates[key] = processColor(updates[key]);\n        }\n      }\n\n      viewDescriptors.value.forEach((viewDescriptor) => {\n        _updatePropsFabric(viewDescriptor.shadowNodeWrapper, updates);\n      });\n    };\n  } else {\n    updatePropsByPlatform = (\n      viewDescriptors: SharedValue<Descriptor[]>,\n      updates: StyleProps | AnimatedStyle,\n      _: ViewRefSet<any> | undefined\n    ): void => {\n      'worklet';\n\n      for (const key in updates) {\n        if (ColorProperties.indexOf(key) !== -1) {\n          updates[key] = processColor(updates[key]);\n        }\n      }\n      viewDescriptors.value.forEach((viewDescriptor) => {\n        _updatePropsPaper(\n          viewDescriptor.tag,\n          viewDescriptor.name || 'RCTView',\n          updates\n        );\n      });\n    };\n  }\n}\n\nexport const updateProps: (\n  viewDescriptor: SharedValue<Descriptor[]>,\n  updates: StyleProps | AnimatedStyle,\n  maybeViewRef: ViewRefSet<any> | undefined\n) => void = updatePropsByPlatform;\n\nexport const updatePropsJestWrapper = (\n  viewDescriptors: SharedValue<Descriptor[]>,\n  updates: AnimatedStyle,\n  maybeViewRef: ViewRefSet<any> | undefined,\n  animatedStyle: MutableRefObject<AnimatedStyle>,\n  adapters: ((updates: AnimatedStyle) => void)[]\n): void => {\n  adapters.forEach((adapter) => {\n    adapter(updates);\n  });\n  animatedStyle.current.value = {\n    ...animatedStyle.current.value,\n    ...updates,\n  };\n\n  updateProps(viewDescriptors, updates, maybeViewRef);\n};\n\nexport default updateProps;\n"]},"metadata":{},"sourceType":"module"}