{"ast":null,"code":"import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity } from \"./Colors\";\nimport { makeMutable } from \"./core\";\nimport { interpolate } from \"./interpolation\";\nimport { useSharedValue } from \"./hook/useSharedValue\";\nexport var Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity'\n};\nvar interpolateColorsHSV = function interpolateColorsHSV(value, inputRange, colors, options) {\n  'worklet';\n\n  var h = 0;\n  var _options$useCorrected = options.useCorrectedHSVInterpolation,\n    useCorrectedHSVInterpolation = _options$useCorrected === void 0 ? true : _options$useCorrected;\n  if (useCorrectedHSVInterpolation) {\n    var correctedInputRange = [inputRange[0]];\n    var originalH = colors.h;\n    var correctedH = [originalH[0]];\n    for (var i = 1; i < originalH.length; ++i) {\n      var d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h = (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) + 1) % 1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n  }\n  var s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n  var v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n  var a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\nvar toLinearSpace = function toLinearSpace(x, gamma) {\n  'worklet';\n\n  return x.map(function (v) {\n    return Math.pow(v / 255, gamma);\n  });\n};\nvar toGammaSpace = function toGammaSpace(x, gamma) {\n  'worklet';\n\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\nvar interpolateColorsRGB = function interpolateColorsRGB(value, inputRange, colors, options) {\n  'worklet';\n\n  var _options$gamma = options.gamma,\n    gamma = _options$gamma === void 0 ? 2.2 : _options$gamma;\n  var outputR = colors.r,\n    outputG = colors.g,\n    outputB = colors.b;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  var r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\n  var g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\n  var b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\n  var a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);\n};\nvar getInterpolateRGB = function getInterpolateRGB(colors) {\n  'worklet';\n\n  var r = [];\n  var g = [];\n  var b = [];\n  var a = [];\n  for (var i = 0; i < colors.length; ++i) {\n    var color = colors[i];\n    var processedColor = processColor(color);\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n};\nvar getInterpolateHSV = function getInterpolateHSV(colors) {\n  'worklet';\n\n  var h = [];\n  var s = [];\n  var v = [];\n  var a = [];\n  for (var i = 0; i < colors.length; ++i) {\n    var color = colors[i];\n    var processedColor = processColor(color);\n    if (typeof processedColor === 'number') {\n      var processedHSVColor = RGBtoHSV(red(processedColor), green(processedColor), blue(processedColor));\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return {\n    h: h,\n    s: s,\n    v: v,\n    a: a\n  };\n};\nexport var interpolateColor = function interpolateColor(value, inputRange, outputRange) {\n  'worklet';\n\n  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);\n  }\n  throw new Error(\"Invalid color space provided: \" + colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n};\nexport var ColorSpace;\n(function (ColorSpace) {\n  ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (ColorSpace = {}));\nexport function useInterpolateConfig(inputRange, outputRange) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return useSharedValue({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    colorSpace: colorSpace,\n    cache: makeMutable(null),\n    options: options\n  });\n}\nexport var interpolateSharableColor = function interpolateSharableColor(value, interpolateConfig) {\n  'worklet';\n\n  var colors = interpolateConfig.value.cache.value;\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n  }\n  throw new Error(\"Invalid color space provided: \" + interpolateConfig.value.colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n};","map":{"version":3,"mappings":"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","names":["hsvToColor","RGBtoHSV","rgbaColor","processColor","red","green","blue","opacity","makeMutable","interpolate","useSharedValue","Extrapolate","EXTEND","CLAMP","IDENTITY","interpolateColorsHSV","value","inputRange","colors","options","h","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","s","v","a","toLinearSpace","x","gamma","map","Math","pow","toGammaSpace","round","interpolateColorsRGB","outputR","r","outputG","g","outputB","b","getInterpolateRGB","color","processedColor","undefined","getInterpolateHSV","processedHSVColor","interpolateColor","outputRange","colorSpace","Error","ColorSpace","useInterpolateConfig","RGB","cache","interpolateSharableColor","interpolateConfig","HSV"],"sources":["interpolateColor.ts"],"sourcesContent":["import {\n  hsvToColor,\n  RGBtoHSV,\n  rgbaColor,\n  processColor,\n  red,\n  green,\n  blue,\n  opacity,\n} from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\nimport { SharedValue } from './commonTypes';\nimport { useSharedValue } from './hook/useSharedValue';\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nexport type InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  let h = 0;\n  const { useCorrectedHSVInterpolation = true } = options;\n  if (useCorrectedHSVInterpolation) {\n    // if the difference between hues in a range is > 180 deg\n    // then move the hue at the right end of the range +/- 360 deg\n    // and add the next point in the original place + 0.00001 with original hue\n    // to not break the next range\n    const correctedInputRange = [inputRange[0]];\n    const originalH = colors.h;\n    const correctedH = [originalH[0]];\n\n    for (let i = 1; i < originalH.length; ++i) {\n      const d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h =\n      (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) +\n        1) %\n      1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n  }\n  const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\n\nconst toLinearSpace = (x: number[], gamma: number): number[] => {\n  'worklet';\n  return x.map((v) => Math.pow(v / 255, gamma));\n};\n\nconst toGammaSpace = (x: number, gamma: number): number => {\n  'worklet';\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  const { gamma = 2.2 } = options;\n  let { r: outputR, g: outputG, b: outputB } = colors;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  const r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\n  const g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\n  const b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(\n    toGammaSpace(r, gamma),\n    toGammaSpace(g, gamma),\n    toGammaSpace(b, gamma),\n    a\n  );\n};\n\ninterface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    // explicit check in case if processedColor is 0\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return { r, g, b, a };\n};\n\ninterface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n  a: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const h = [];\n  const s = [];\n  const v = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color) as any;\n    if (typeof processedColor === 'number') {\n      const processedHSVColor = RGBtoHSV(\n        red(processedColor),\n        green(processedColor),\n        blue(processedColor)\n      );\n\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return { h, s, v, a };\n};\n\nexport const interpolateColor = (\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB',\n  options: InterpolationOptions = {}\n): string | number => {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange),\n      options\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange),\n      options\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n  options: InterpolationOptions;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB,\n  options: InterpolationOptions = {}\n): SharedValue<InterpolateConfig> {\n  return useSharedValue<InterpolateConfig>({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable<InterpolateRGB | InterpolateHSV | null>(null),\n    options,\n  });\n}\n\nexport const interpolateSharableColor = (\n  value: number,\n  interpolateConfig: SharedValue<InterpolateConfig>\n): string | number => {\n  'worklet';\n  let colors = interpolateConfig.value.cache.value;\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsRGB(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateRGB,\n      interpolateConfig.value.options\n    );\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsHSV(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateHSV,\n      interpolateConfig.value.options\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n"]},"metadata":{},"sourceType":"module"}