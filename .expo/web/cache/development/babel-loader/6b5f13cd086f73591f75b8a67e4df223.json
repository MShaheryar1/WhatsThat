{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport { BaseNavigationContainer } from '@react-navigation/core';\nimport ThemeProvider from \"./theming/ThemeProvider\";\nimport DefaultTheme from \"./theming/DefaultTheme\";\nimport useBackButton from \"./useBackButton\";\nvar NavigationContainer = React.forwardRef(function NavigationContainer(_ref, ref) {\n  var _ref$theme = _ref.theme,\n    theme = _ref$theme === void 0 ? DefaultTheme : _ref$theme,\n    rest = _objectWithoutProperties(_ref, [\"theme\"]);\n  var refContainer = React.useRef(null);\n  useBackButton(refContainer);\n  React.useImperativeHandle(ref, function () {\n    return refContainer.current;\n  });\n  return React.createElement(ThemeProvider, {\n    value: theme\n  }, React.createElement(BaseNavigationContainer, _extends({}, rest, {\n    ref: refContainer\n  })));\n});\nexport default NavigationContainer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,uBADF,QAIO,wBAJP;AAKA,OAAOC,aAAP;AACA,OAAOC,YAAP;AACA,OAAOC,aAAP;AAkBA,IAAMC,mBAAmB,GAAGL,KAAK,CAACM,UAAN,CAAiB,SAASD,mBAAT,OAE3CE,GAF2C,EAG3C;EAAA,sBAFEC,KAAK;IAALA,KAAK,2BAAGL;IAAiBM,IAE3B;EACA,IAAMC,YAAY,GAAGV,KAAK,CAACW,MAAN,CAAqC,IAArC,CAArB;EAEAP,aAAa,CAACM,YAAD,CAAb;EAEAV,KAAK,CAACY,mBAAN,CAA0BL,GAA1B,EAA+B;IAAA,OAAMG,YAAY,CAACG,OAAlD;EAAA;EAEA,OACEb,oBAACE,aAAD;IAAeY,KAAK,EAAEN;EAAtB,GACER,oBAACC,uBAAD,eAA6BQ,IAA7B;IAAmCF,GAAG,EAAEG;EAAxC,GADF,CADF;AAKD,CAf2B,CAA5B;AAiBA,eAAeL,mBAAf","names":["React","BaseNavigationContainer","ThemeProvider","DefaultTheme","useBackButton","NavigationContainer","forwardRef","ref","theme","rest","refContainer","useRef","useImperativeHandle","current","value"],"sources":["NavigationContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  BaseNavigationContainer,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from '@react-navigation/core';\nimport ThemeProvider from './theming/ThemeProvider';\nimport DefaultTheme from './theming/DefaultTheme';\nimport useBackButton from './useBackButton';\nimport { Theme } from './types';\n\ntype Props = NavigationContainerProps & {\n  theme?: Theme;\n};\n\n/**\n * Container component which holds the navigation state\n * designed for mobile apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst NavigationContainer = React.forwardRef(function NavigationContainer(\n  { theme = DefaultTheme, ...rest }: Props,\n  ref: React.Ref<NavigationContainerRef>\n) {\n  const refContainer = React.useRef<NavigationContainerRef>(null);\n\n  useBackButton(refContainer);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  return (\n    <ThemeProvider value={theme}>\n      <BaseNavigationContainer {...rest} ref={refContainer} />\n    </ThemeProvider>\n  );\n});\n\nexport default NavigationContainer;\n"]},"metadata":{},"sourceType":"module"}